// <auto-generated />
using System;
using LabMaterials.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LabMaterials.Migrations
{
    [DbContext(typeof(LabDBContext))]
    [Migration("20250516054010_ChangeReqSectorType")]
    partial class ChangeReqSectorType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LabMaterials.DB.ActivityLog", b =>
                {
                    b.Property<int>("ActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActivityLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityLogId"));

                    b.Property<DateTime>("ActivityTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("SourceIP");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ActivityLogId")
                        .HasName("PK_AC.ActivityLog");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("LabMaterials.DB.ColorCode", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CODE_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeId"));

                    b.Property<string>("ColorCode1")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("COLOR_CODE");

                    b.Property<string>("ColorName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("COLOR_NAME");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ITEM_CODE");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.HasKey("CodeId")
                        .HasName("PK__ColorCod__D033FA864E829A30");

                    b.HasIndex("ItemId");

                    b.ToTable("ColorCodes");
                });

            modelBuilder.Entity("LabMaterials.DB.DamagedItem", b =>
                {
                    b.Property<int>("DamagedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DamagedID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DamagedId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime?>("DamagedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DamagedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("DamagedReason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndedById")
                        .HasColumnType("int")
                        .HasColumnName("EndedByID");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedByID");

                    b.HasKey("DamagedId")
                        .HasName("PK__DAMAGED___5EE431278CE1F0BF");

                    b.HasIndex("ItemId");

                    b.ToTable("DAMAGED_ITEMS");
                });

            modelBuilder.Entity("LabMaterials.DB.DespensedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountSpent")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemCardId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialRequestId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ItemCardId" }, "IX_ItemCards_ItemCardId");

                    b.HasIndex(new[] { "MaterialRequestId" }, "IX_MaterialRequests_MaterialRequestId");

                    b.ToTable("DespensedItems");
                });

            modelBuilder.Entity("LabMaterials.DB.Destination", b =>
                {
                    b.Property<int>("DId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("D_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByID");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DestinationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndedById")
                        .HasColumnType("int")
                        .HasColumnName("EndedByID");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedByID");

                    b.HasKey("DId")
                        .HasName("PK__Destinat__76B8FF7D9D658B66");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("LabMaterials.DB.DisbursementRequest", b =>
                {
                    b.Property<int>("DisbursementRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("InventoryBalanced")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemQuantity")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_QUANTITY");

                    b.Property<string>("Itemcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ITEMCODE");

                    b.Property<string>("Itemtypecode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ITEMTYPECODE");

                    b.Property<DateTime>("ReqReceivedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("RequesterName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RequestingPlace")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("DisbursementRequestId");

                    b.HasIndex("StoreId");

                    b.ToTable("DisbursementRequest");
                });

            modelBuilder.Entity("LabMaterials.DB.HazardType", b =>
                {
                    b.Property<string>("HazardTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HazardTypeName");

                    b.ToTable("HazardType");
                });

            modelBuilder.Entity("LabMaterials.DB.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("BatchNo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndedById")
                        .HasColumnType("int")
                        .HasColumnName("EndedByID");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HazardTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsHazardous")
                        .HasColumnType("bit");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ItemTypeCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("SupplyID");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitID");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedByID");

                    b.HasKey("ItemId");

                    b.HasIndex("GroupCode");

                    b.HasIndex("HazardTypeName");

                    b.HasIndex("ItemTypeCode");

                    b.HasIndex("SupplyId");

                    b.HasIndex("UnitId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("LabMaterials.DB.ItemCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Chemical")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HazardTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ItemTypeCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfmeasure")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupCode" }, "IX_ItemCards_GroupCode");

                    b.HasIndex(new[] { "HazardTypeName" }, "IX_ItemCards_HazardTypeName");

                    b.HasIndex(new[] { "ItemId" }, "IX_ItemCards_ItemId");

                    b.HasIndex(new[] { "ItemTypeCode" }, "IX_ItemCards_ItemTypeCode");

                    b.HasIndex(new[] { "StoreId" }, "IX_ItemCards_StoreId");

                    b.ToTable("ItemCards");
                });

            modelBuilder.Entity("LabMaterials.DB.ItemCardBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ceiling")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEntry")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemCardId")
                        .HasColumnType("int");

                    b.Property<int>("Minimum")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptDocumentnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReorderLimit")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("ShelfId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfAsset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ItemCardId" }, "IX_ItemCardBatches_ItemCardId");

                    b.HasIndex(new[] { "RoomId" }, "IX_ItemCardBatches_RoomId");

                    b.HasIndex(new[] { "ShelfId" }, "IX_ItemCardBatches_ShelfId");

                    b.HasIndex(new[] { "SupplierId" }, "IX_ItemCardBatches_SupplierId");

                    b.ToTable("ItemCardBatches");
                });

            modelBuilder.Entity("LabMaterials.DB.ItemCardExtended", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Chemical")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HazardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Minimum")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("int");

                    b.Property<int>("ReorderLimit")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfAsset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfmeasure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemCardExtended");
                });

            modelBuilder.Entity("LabMaterials.DB.ItemCardViewModels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Chemical")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfEntry")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HazardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Minimum")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptDocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReorderLimit")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShelfName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfAsset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemCardViewModels");
                });

            modelBuilder.Entity("LabMaterials.DB.ItemGroup", b =>
                {
                    b.Property<string>("GroupCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("GroupDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GroupCode")
                        .HasName("PK_ItemGroup_1");

                    b.ToTable("ItemGroup");
                });

            modelBuilder.Entity("LabMaterials.DB.ItemInfoByStoreId", b =>
                {
                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ItemTypeCode")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.ToTable("ItemInfoByStoreID");
                });

            modelBuilder.Entity("LabMaterials.DB.ItemType", b =>
                {
                    b.Property<string>("ItemTypeCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ItemTypeCode")
                        .HasName("PK_ItemType_1");

                    b.ToTable("ItemType");
                });

            modelBuilder.Entity("LabMaterials.DB.MaterialRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int?>("CurrentApproverUserId")
                        .HasColumnType("int");

                    b.Property<bool>("DepartmentManagerApproval")
                        .HasColumnType("bit");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FiscalYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("KeeperApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestDocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("RequestingSector")
                        .HasMaxLength(200)
                        .HasColumnType("int");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.HasIndex(new[] { "CurrentApproverUserId" }, "IX_MaterialRequests_CurrentApproverUserId");

                    b.HasIndex(new[] { "RequestedByUserId" }, "IX_MaterialRequests_RequestedByUserId");

                    b.ToTable("MaterialRequests");
                });

            modelBuilder.Entity("LabMaterials.DB.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ReportId" }, "IX_Messages_ReportId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("LabMaterials.DB.PrimaryKey", b =>
                {
                    b.Property<string>("TableName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NextId")
                        .HasColumnType("int");

                    b.HasKey("TableName")
                        .HasName("PK__PrimaryK__733652EFA4AA236C");

                    b.ToTable("PrimaryKeys");
                });

            modelBuilder.Entity("LabMaterials.DB.Privilege", b =>
                {
                    b.Property<int>("PrivilegeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivilegeId"));

                    b.Property<string>("PrivilegeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PrivilegeId");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("LabMaterials.DB.ReceivingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReceivingReportId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ItemId" }, "IX_ReceivingItems_ItemId");

                    b.HasIndex(new[] { "ReceivingReportId" }, "IX_ReceivingItems_ReceivingReportId");

                    b.ToTable("ReceivingItems");
                });

            modelBuilder.Entity("LabMaterials.DB.ReceivingReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("BasedOnDocument")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int?>("ChiefResponsibleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("FiscalYear")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool>("GeneralSupApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("GeneralSupervisorApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRejectedByGeneralSupervisor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejectedByTechnicalMember")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReplied")
                        .HasColumnType("bit");

                    b.Property<bool>("KeeperApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReceivingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceivingWarehouse")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("RecipientEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientSector")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int?>("RejectedById")
                        .HasColumnType("int");

                    b.Property<string>("SectorNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<bool>("TechnicalMemberApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("TechnicalMemberApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TechnicalMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SupplierId" }, "IX_ReceivingReports_SupplierId");

                    b.ToTable("ReceivingReports");
                });

            modelBuilder.Entity("LabMaterials.DB.Requester", b =>
                {
                    b.Property<int>("ReqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("REQ_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReqId"));

                    b.Property<string>("ContactNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CONTACT_NO");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CREATED_BY");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("int")
                        .HasColumnName("DESTINATION_ID");

                    b.Property<string>("DestinationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DESTINATION_NAME");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime")
                        .HasColumnName("ENDED");

                    b.Property<string>("EndedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ENDED_BY");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("IS_ACTIVE");

                    b.Property<string>("ReqName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("REQ_NAME");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("STATUS");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UPDATED_BY");

                    b.HasKey("ReqId")
                        .HasName("PK__REQUESTE__06143B5B0B81E13C");

                    b.HasIndex("DestinationId");

                    b.ToTable("REQUESTER");
                });

            modelBuilder.Entity("LabMaterials.DB.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndedById")
                        .HasColumnType("int")
                        .HasColumnName("EndedByID");

                    b.Property<int?>("KeeperId")
                        .HasColumnType("int")
                        .HasColumnName("KeeperID");

                    b.Property<int?>("NoOfShelves")
                        .HasColumnType("int");

                    b.Property<string>("RoomDesc")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("RoomName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoomNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ROOM_NO");

                    b.Property<string>("RoomStatus")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedByID");

                    b.HasKey("RoomId")
                        .HasName("PK__ROOMS__328639396C49D5E5");

                    b.HasIndex("StoreId");

                    b.ToTable("ROOMS");
                });

            modelBuilder.Entity("LabMaterials.DB.Shelf", b =>
                {
                    b.Property<int>("ShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShelfId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndedById")
                        .HasColumnType("int")
                        .HasColumnName("EndedByID");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("ShelfNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("SHELF_NO");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedByID");

                    b.HasKey("ShelfId")
                        .HasName("PK__SHELVES__DBD04F0726157D69");

                    b.HasIndex("RoomId");

                    b.HasIndex("StoreId");

                    b.ToTable("SHELVES");
                });

            modelBuilder.Entity("LabMaterials.DB.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageId"));

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndedById")
                        .HasColumnType("int")
                        .HasColumnName("EndedByID");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Expiry_date");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfId")
                        .HasColumnType("int");

                    b.Property<string>("ShelfNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("supplyID");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedByID");

                    b.HasKey("StorageId");

                    b.HasIndex("ItemId");

                    b.HasIndex("RoomId");

                    b.HasIndex("ShelfId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplyId");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("LabMaterials.DB.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndedById")
                        .HasColumnType("int")
                        .HasColumnName("EndedByID");

                    b.Property<int?>("InStore")
                        .HasColumnType("int")
                        .HasColumnName("IN_Store");

                    b.Property<int?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("isActive");

                    b.Property<string>("ShelfNumbers")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StoreNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StoreType")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedByID");

                    b.Property<int?>("WarehouseManagerId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseManagerID");

                    b.Property<string>("WarehouseStatus")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("StoreId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("LabMaterials.DB.StoreDataResult", b =>
                {
                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("IsActive")
                        .HasColumnType("int")
                        .HasColumnName("isActive");

                    b.Property<int?>("KeeperJobNum")
                        .HasColumnType("int");

                    b.Property<string>("KeeperName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ManagerJobNum")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfShelves")
                        .HasColumnType("int");

                    b.Property<string>("RoomDesc")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RoomNo")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ROOM_NO");

                    b.Property<string>("RoomStatus")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ShelfNumber")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("SHELF_NUMBER");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("StoreNumber")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("StoreType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseManagerName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WarehouseStatus")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.ToTable("StoreDataResult");
                });

            modelBuilder.Entity("LabMaterials.DB.StoreMovement", b =>
                {
                    b.Property<int>("StoreMovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StoreMovementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreMovementId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndedById")
                        .HasColumnType("int")
                        .HasColumnName("EndedByID");

                    b.Property<int?>("FromRoomId")
                        .HasColumnType("int")
                        .HasColumnName("FromRoomID");

                    b.Property<int?>("FromShelfId")
                        .HasColumnType("int")
                        .HasColumnName("FromShelfID");

                    b.Property<int?>("FromStoreId")
                        .HasColumnType("int")
                        .HasColumnName("FromStoreID");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemQuantity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ItemType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ToStoreId")
                        .HasColumnType("int")
                        .HasColumnName("ToStoreID");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedByID");

                    b.HasKey("StoreMovementId")
                        .HasName("PK__STORE_MO__610F133843FD3233");

                    b.HasIndex("FromRoomId");

                    b.HasIndex("FromShelfId");

                    b.HasIndex("FromStoreId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ToStoreId");

                    b.ToTable("STORE_MOVEMENT");
                });

            modelBuilder.Entity("LabMaterials.DB.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("CoordinatorName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndedById")
                        .HasColumnType("int")
                        .HasColumnName("EndedByID");

                    b.Property<string>("SupplierContact")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedByID");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("LabMaterials.DB.Supply", b =>
                {
                    b.Property<int>("SupplyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Expiry_date");

                    b.Property<bool>("InventoryBalanced")
                        .HasColumnType("bit");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PurchaseOrderNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("SupplyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Supply");
                });

            modelBuilder.Entity("LabMaterials.DB.Tablecolumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayColumns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Page")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tablecolumn");
                });

            modelBuilder.Entity("LabMaterials.DB.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChemicalStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<string>("DocumentType")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HazardType")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UnitDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnitsMeasure")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<string>("WarehouseType")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("GroupCode");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("LabMaterials.DB.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmpAffiliation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndedById")
                        .HasColumnType("int")
                        .HasColumnName("EndedByID");

                    b.Property<int>("FailedPasswordAttemptCount")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActiveDirectoryUser")
                        .HasColumnType("bit");

                    b.Property<int?>("JobNumber")
                        .HasColumnType("int");

                    b.Property<string>("Lang")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .HasColumnName("lang")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("varbinary(512)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Transfer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedByID");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LabMaterials.DB.UserGroup", b =>
                {
                    b.Property<int>("UserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    b.Property<string>("UserGroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserGroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("LabMaterials.DB.UserGroupPrivilege", b =>
                {
                    b.Property<int>("UserGroupPrivilageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserGroupPrivilageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserGroupPrivilageId"));

                    b.Property<int>("PrivilegeId")
                        .HasColumnType("int")
                        .HasColumnName("PrivilegeID");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    b.HasKey("UserGroupPrivilageId");

                    b.HasIndex("PrivilegeId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("UserGroup_Privileges");
                });

            modelBuilder.Entity("LabMaterials.DB.VActivityLog", b =>
                {
                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("SourceIp")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable((string)null);

                    b.ToView("vActivityLog", (string)null);
                });

            modelBuilder.Entity("LabMaterials.DB.ActivityLog", b =>
                {
                    b.HasOne("LabMaterials.DB.User", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_AC.ActivityLog_AC.User_User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LabMaterials.DB.ColorCode", b =>
                {
                    b.HasOne("LabMaterials.DB.Item", "Item")
                        .WithMany("ColorCodes")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemID");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("LabMaterials.DB.DamagedItem", b =>
                {
                    b.HasOne("LabMaterials.DB.Item", "Item")
                        .WithMany("DamagedItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__DAMAGED_I__ItemI__797309D9");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("LabMaterials.DB.DespensedItem", b =>
                {
                    b.HasOne("LabMaterials.DB.ItemCard", "ItemCard")
                        .WithMany()
                        .HasForeignKey("ItemCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabMaterials.DB.MaterialRequest", "MaterialRequest")
                        .WithMany()
                        .HasForeignKey("MaterialRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCard");

                    b.Navigation("MaterialRequest");
                });

            modelBuilder.Entity("LabMaterials.DB.DisbursementRequest", b =>
                {
                    b.HasOne("LabMaterials.DB.Store", "Store")
                        .WithMany("DisbursementRequests")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_DisbursementRequest_StoreId");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("LabMaterials.DB.Item", b =>
                {
                    b.HasOne("LabMaterials.DB.ItemGroup", "GroupCodeNavigation")
                        .WithMany("Items")
                        .HasForeignKey("GroupCode")
                        .IsRequired()
                        .HasConstraintName("FK_Item_ItemGroup");

                    b.HasOne("LabMaterials.DB.HazardType", "HazardTypeNameNavigation")
                        .WithMany("Items")
                        .HasForeignKey("HazardTypeName")
                        .HasConstraintName("FK_Item_ItemHazardType");

                    b.HasOne("LabMaterials.DB.ItemType", "ItemTypeCodeNavigation")
                        .WithMany("Items")
                        .HasForeignKey("ItemTypeCode")
                        .IsRequired()
                        .HasConstraintName("FK_Item_ItemType");

                    b.HasOne("LabMaterials.DB.Supplier", "Supply")
                        .WithMany("Items")
                        .HasForeignKey("SupplyId")
                        .HasConstraintName("FK__Item__SupplyID__76969D2E");

                    b.HasOne("LabMaterials.DB.Unit", "Unit")
                        .WithMany("Items")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("FK_Item_ItemUnit");

                    b.Navigation("GroupCodeNavigation");

                    b.Navigation("HazardTypeNameNavigation");

                    b.Navigation("ItemTypeCodeNavigation");

                    b.Navigation("Supply");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("LabMaterials.DB.ItemCard", b =>
                {
                    b.HasOne("LabMaterials.DB.ItemGroup", "GroupCodeNavigation")
                        .WithMany("ItemCards")
                        .HasForeignKey("GroupCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabMaterials.DB.HazardType", "HazardTypeNameNavigation")
                        .WithMany("ItemCards")
                        .HasForeignKey("HazardTypeName");

                    b.HasOne("LabMaterials.DB.Item", "Item")
                        .WithMany("ItemCards")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabMaterials.DB.ItemType", "ItemTypeCodeNavigation")
                        .WithMany("ItemCards")
                        .HasForeignKey("ItemTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabMaterials.DB.Store", "Store")
                        .WithMany("ItemCards")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupCodeNavigation");

                    b.Navigation("HazardTypeNameNavigation");

                    b.Navigation("Item");

                    b.Navigation("ItemTypeCodeNavigation");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("LabMaterials.DB.ItemCardBatch", b =>
                {
                    b.HasOne("LabMaterials.DB.ItemCard", "ItemCard")
                        .WithMany("ItemCardBatches")
                        .HasForeignKey("ItemCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabMaterials.DB.Room", "Room")
                        .WithMany("ItemCardBatches")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabMaterials.DB.Shelf", "Shelf")
                        .WithMany("ItemCardBatches")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabMaterials.DB.Supplier", "Supplier")
                        .WithMany("ItemCardBatches")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCard");

                    b.Navigation("Room");

                    b.Navigation("Shelf");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("LabMaterials.DB.MaterialRequest", b =>
                {
                    b.HasOne("LabMaterials.DB.User", "CurrentApproverUser")
                        .WithMany("MaterialRequestCurrentApproverUsers")
                        .HasForeignKey("CurrentApproverUserId");

                    b.HasOne("LabMaterials.DB.User", "RequestedByUser")
                        .WithMany("MaterialRequestRequestedByUsers")
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentApproverUser");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("LabMaterials.DB.Message", b =>
                {
                    b.HasOne("LabMaterials.DB.ReceivingReport", "ReceivingReport")
                        .WithMany("Messages")
                        .HasForeignKey("ReportId");

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("LabMaterials.DB.ReceivingItem", b =>
                {
                    b.HasOne("LabMaterials.DB.Item", "Item")
                        .WithMany("ReceivingItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabMaterials.DB.ReceivingReport", "ReceivingReport")
                        .WithMany("ReceivingItems")
                        .HasForeignKey("ReceivingReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("LabMaterials.DB.ReceivingReport", b =>
                {
                    b.HasOne("LabMaterials.DB.Supplier", "Supplier")
                        .WithMany("ReceivingReports")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("LabMaterials.DB.Requester", b =>
                {
                    b.HasOne("LabMaterials.DB.Destination", "Destination")
                        .WithMany("Requesters")
                        .HasForeignKey("DestinationId")
                        .HasConstraintName("FK__REQUESTER__DESTI__245D67DE");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("LabMaterials.DB.Room", b =>
                {
                    b.HasOne("LabMaterials.DB.Store", "Store")
                        .WithMany("Rooms")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__ROOMS__StoreId__71D1E811");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("LabMaterials.DB.Shelf", b =>
                {
                    b.HasOne("LabMaterials.DB.Room", "Room")
                        .WithMany("Shelves")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK__SHELVES__RoomId__74AE54BC");

                    b.HasOne("LabMaterials.DB.Store", "Store")
                        .WithMany("Shelves")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__SHELVES__StoreId__75A278F5");

                    b.Navigation("Room");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("LabMaterials.DB.Storage", b =>
                {
                    b.HasOne("LabMaterials.DB.Item", "Item")
                        .WithMany("Storages")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Storage_Item");

                    b.HasOne("LabMaterials.DB.Room", "Room")
                        .WithMany("Storages")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK__Storage__RoomId__7A672E12");

                    b.HasOne("LabMaterials.DB.Shelf", "Shelf")
                        .WithMany("Storages")
                        .HasForeignKey("ShelfId")
                        .HasConstraintName("FK__Storage__ShelfId__7B5B524B");

                    b.HasOne("LabMaterials.DB.Store", "Store")
                        .WithMany("Storages")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Storage_Store");

                    b.HasOne("LabMaterials.DB.Supply", "Supply")
                        .WithMany("Storages")
                        .HasForeignKey("SupplyId")
                        .HasConstraintName("FK_Storage_Supply");

                    b.Navigation("Item");

                    b.Navigation("Room");

                    b.Navigation("Shelf");

                    b.Navigation("Store");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("LabMaterials.DB.StoreMovement", b =>
                {
                    b.HasOne("LabMaterials.DB.Room", "FromRoom")
                        .WithMany("StoreMovements")
                        .HasForeignKey("FromRoomId")
                        .HasConstraintName("FK__STORE_MOV__FromR__7F2BE32F");

                    b.HasOne("LabMaterials.DB.Shelf", "FromShelf")
                        .WithMany("StoreMovements")
                        .HasForeignKey("FromShelfId")
                        .HasConstraintName("FK__STORE_MOV__FromS__00200768");

                    b.HasOne("LabMaterials.DB.Store", "FromStore")
                        .WithMany("StoreMovementFromStores")
                        .HasForeignKey("FromStoreId")
                        .HasConstraintName("FK__STORE_MOV__FromS__7E37BEF6");

                    b.HasOne("LabMaterials.DB.Item", "Item")
                        .WithMany("StoreMovements")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__STORE_MOV__ItemI__02084FDA");

                    b.HasOne("LabMaterials.DB.Store", "ToStore")
                        .WithMany("StoreMovementToStores")
                        .HasForeignKey("ToStoreId")
                        .HasConstraintName("FK__STORE_MOV__ToSto__01142BA1");

                    b.Navigation("FromRoom");

                    b.Navigation("FromShelf");

                    b.Navigation("FromStore");

                    b.Navigation("Item");

                    b.Navigation("ToStore");
                });

            modelBuilder.Entity("LabMaterials.DB.Supply", b =>
                {
                    b.HasOne("LabMaterials.DB.Supplier", "Supplier")
                        .WithMany("Supplies")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_Supply_Supplier");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("LabMaterials.DB.Unit", b =>
                {
                    b.HasOne("LabMaterials.DB.ItemGroup", "GroupCodeNavigation")
                        .WithMany("Units")
                        .HasForeignKey("GroupCode")
                        .IsRequired()
                        .HasConstraintName("FK_Units_UnitGroup");

                    b.Navigation("GroupCodeNavigation");
                });

            modelBuilder.Entity("LabMaterials.DB.User", b =>
                {
                    b.HasOne("LabMaterials.DB.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_UserGroup");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("LabMaterials.DB.UserGroupPrivilege", b =>
                {
                    b.HasOne("LabMaterials.DB.Privilege", "Privilege")
                        .WithMany("UserGroupPrivileges")
                        .HasForeignKey("PrivilegeId")
                        .IsRequired()
                        .HasConstraintName("FK_UserGroup_Privileges_Privileges");

                    b.HasOne("LabMaterials.DB.UserGroup", "UserGroup")
                        .WithMany("UserGroupPrivileges")
                        .HasForeignKey("UserGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_UserGroup_Privileges_UserGroup");

                    b.Navigation("Privilege");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("LabMaterials.DB.Destination", b =>
                {
                    b.Navigation("Requesters");
                });

            modelBuilder.Entity("LabMaterials.DB.HazardType", b =>
                {
                    b.Navigation("ItemCards");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("LabMaterials.DB.Item", b =>
                {
                    b.Navigation("ColorCodes");

                    b.Navigation("DamagedItems");

                    b.Navigation("ItemCards");

                    b.Navigation("ReceivingItems");

                    b.Navigation("Storages");

                    b.Navigation("StoreMovements");
                });

            modelBuilder.Entity("LabMaterials.DB.ItemCard", b =>
                {
                    b.Navigation("ItemCardBatches");
                });

            modelBuilder.Entity("LabMaterials.DB.ItemGroup", b =>
                {
                    b.Navigation("ItemCards");

                    b.Navigation("Items");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("LabMaterials.DB.ItemType", b =>
                {
                    b.Navigation("ItemCards");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("LabMaterials.DB.Privilege", b =>
                {
                    b.Navigation("UserGroupPrivileges");
                });

            modelBuilder.Entity("LabMaterials.DB.ReceivingReport", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("ReceivingItems");
                });

            modelBuilder.Entity("LabMaterials.DB.Room", b =>
                {
                    b.Navigation("ItemCardBatches");

                    b.Navigation("Shelves");

                    b.Navigation("Storages");

                    b.Navigation("StoreMovements");
                });

            modelBuilder.Entity("LabMaterials.DB.Shelf", b =>
                {
                    b.Navigation("ItemCardBatches");

                    b.Navigation("Storages");

                    b.Navigation("StoreMovements");
                });

            modelBuilder.Entity("LabMaterials.DB.Store", b =>
                {
                    b.Navigation("DisbursementRequests");

                    b.Navigation("ItemCards");

                    b.Navigation("Rooms");

                    b.Navigation("Shelves");

                    b.Navigation("Storages");

                    b.Navigation("StoreMovementFromStores");

                    b.Navigation("StoreMovementToStores");
                });

            modelBuilder.Entity("LabMaterials.DB.Supplier", b =>
                {
                    b.Navigation("ItemCardBatches");

                    b.Navigation("Items");

                    b.Navigation("ReceivingReports");

                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("LabMaterials.DB.Supply", b =>
                {
                    b.Navigation("Storages");
                });

            modelBuilder.Entity("LabMaterials.DB.Unit", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("LabMaterials.DB.User", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("MaterialRequestCurrentApproverUsers");

                    b.Navigation("MaterialRequestRequestedByUsers");
                });

            modelBuilder.Entity("LabMaterials.DB.UserGroup", b =>
                {
                    b.Navigation("UserGroupPrivileges");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
