using LabMaterials.DB;
using LabMaterials.dtos;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Identity.Client.Extensions.Msal;
using OfficeOpenXml;
using OfficeOpenXml.FormulaParsing.Excel.Functions;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http.Extensions;
using Microsoft.AspNetCore.Http.Features;
using Microsoft.AspNetCore.Http; 
using Microsoft.AspNetCore.Session;

namespace LabMaterials.Pages
{
    public class RequestsModel : BasePageModel
    {
        public string lblRequests, lblNewReceivingReport, pagetype = "inbox", inboxClass = "btn-dark text-white", outboxClass = "btn-light";

        public List<ReceivingReport> RequestSent { get; set; }

        public List<Message> InboxList { get; set; }

        public IList<Store> Warehouses { get; set; }

        public string UserFullName;
        public string UserGroupName;
        public int? UserId;

        public void OnGet()
        {
            if (HttpContext.Request.Query.ContainsKey("type"))
            {
                pagetype = HttpContext.Request.Query["type"];

                if (pagetype == "inbox")
                {
                    inboxClass = "btn-dark text-white";
                    outboxClass = "btn-light";
                }
                else
                {
                    inboxClass = "btn-light";
                    outboxClass = "btn-dark text-white";
                }
            }
            var dbContext = new LabDBContext();
            this.UserFullName = HttpContext.Session.GetString("FullName");
            this.UserGroupName = HttpContext.Session.GetString("UserGroup");

            UserId = HttpContext.Session.GetInt32("UserId");

            RequestSent = dbContext.ReceivingReports.ToList(); 
            // ManagerInboxList = dbContext.ReceivingReports
            //     .Where(r => r.KeeperApproval == true)
            //     .ToList();
             Warehouses = dbContext.Stores.ToList(); 
 
            InboxList = dbContext.Messages
                .Where(s => s.Recipient == UserFullName).ToList();

            base.ExtractSessionData();
            FillLables();
        }


         public IActionResult OnPostView([FromForm] string ReportId)
        {
                   var dbContext = new LabDBContext();

            HttpContext.Session.SetString("ReportId", ReportId);
            RequestSent = dbContext.ReceivingReports.ToList(); 


            return RedirectToPage("./ViewReceivingReport");
        }

        public IActionResult OnPostAccept([FromForm] int ReceivingReportId)
        {   
           base.ExtractSessionData();
            this.UserFullName = HttpContext.Session.GetString("FullName");
            this.UserGroupName = HttpContext.Session.GetString("UserGroup");

            var dbContext = new LabDBContext();
                RequestSent = dbContext.ReceivingReports.ToList(); 

              
                InboxList = dbContext.Messages
                .Where(s => s.Recipient == this.UserFullName).ToList();
                var report = dbContext.ReceivingReports.FirstOrDefault(r => r.Id == ReceivingReportId);
          
                if (report != null)
                {   
                    var generalSup = dbContext.Users.FirstOrDefault(u => u.UserId == report.ChiefResponsibleId);

                    var technicalMember = dbContext.Users.FirstOrDefault(u => u.UserId == report.TechnicalMemberId);


                    //If technical Member is logged in than information message is sent to manager and approval message is sent to general Supervisor
                    if(this.UserGroupName == "Technical Member"){
                        var manager = dbContext.Users.FirstOrDefault(u => u.JobNumber == report.RecipientEmployeeId);
                        //update the technical member approval status
                        report.TechnicalMemberApproval = true;

                       

                        //message to warehouse manager for information
                        string managerMessage = string.Format("Approved the request for items generated by {0}.", report.CreatedBy);
                        var msgToManager = new Message{
                            ReceivingReportId = ReceivingReportId,
                            Sender = this.UserFullName,
                            Recipient = manager.FullName,
                            Content = managerMessage
                        };
                        dbContext.Messages.Add(msgToManager);


                        //message to general supervisor for approval
                        if(generalSup != null){
                            string supMessage = string.Format("Sent Request for Items. Approve the request or add comments.");
                            var msgToSup = new Message{
                                ReceivingReportId = ReceivingReportId,
                                Sender = this.UserFullName,
                                Recipient = generalSup.FullName,
                                Content = supMessage
                            };
                            dbContext.Messages.Add(msgToSup);

                        }
                    }
                    else if (this.UserGroupName == "General Supervisor"){
                        //update the general supervisor approval status
                        report.GeneralSupApproval = true;
                        string keeperMessage = string.Format("Your request is accepted by {0}(TechnicalMember) and {1}(General Supervisor).",technicalMember.FullName, generalSup.FullName);
                        var msgToKeeper = new Message{
                                ReceivingReportId = ReceivingReportId,
                                Sender = this.UserFullName,
                                Recipient = report.CreatedBy,
                                Content = keeperMessage
                        };
                        dbContext.Messages.Add(msgToKeeper);

                    }

                    

                    dbContext.SaveChanges();
                }else{
                    Console.WriteLine("report not found");
                }

                

                return Page();
            }
        


        private void FillLables()
        {
            this.lblRequests = (Program.Translations["Requests"])[Lang];
            this.lblNewReceivingReport = (Program.Translations["NewReceivingReport"])[Lang];
        }
    }
}
