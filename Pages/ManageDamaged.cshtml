@page
@model LabMaterials.Pages.ManageDamagedModel
@section Scripts
{
    <script type="text/javascript" language="javascript">
        const notyf = new Notyf({
            position: {
                x: 'center',
                y: 'top',
            },
            types: [
                {
                    type: 'error',
                    background: '#e3392c',
                    icon: {
                        className: 'fas fa-times',
                        tagName: 'span',
                        color: '#000000'
                    },
                    dismissible: true,
                    duration: 0,
                    ripple: true
                }
            ]
        });

        function showErrorNotification(message) {
            notyf.open({
                type: 'error',
                message: message
            });
        }

        @if (!string.IsNullOrEmpty(Model.Message))
            {
                <text>
                    var errorMessageFromServer = @Html.Raw(Json.Serialize(Model.Message));
                    showErrorNotification(errorMessageFromServer);
                </text>
        }

        const toggleButton = document.getElementById('toggleDropdown');
        const dropdownPanel = document.getElementById('dropdownPanel');

        toggleButton.addEventListener('click', function () {
            dropdownPanel.style.display = (dropdownPanel.style.display === 'none' || dropdownPanel.style.display === '') ? 'block' : 'none';
        });

        // Optional: hide when click outside
        document.addEventListener('click', function (e) {
            if (!toggleButton.contains(e.target) && !dropdownPanel.contains(e.target)) {
                dropdownPanel.style.display = 'none';
            }
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
        document.getElementById('exportExcel').addEventListener('click', function () {
            let table = document.querySelector('#exportTable'); // use hidden export table directly
            let wb = XLSX.utils.book_new();
            let ws_data = [];

            // Get headers
            const headers = Array.from(table.querySelectorAll('thead th'))
                .map(th => th.textContent.trim()); // use textContent instead of innerText
            ws_data.push(headers);

            // Get rows
            const rows = table.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const rowData = [];
                const cells = row.querySelectorAll('th, td');
                cells.forEach(cell => {
                    rowData.push(cell.textContent.trim()); // use textContent
                });
                ws_data.push(rowData);
            });

            // Create worksheet and trigger download
            let ws = XLSX.utils.aoa_to_sheet(ws_data);
            XLSX.utils.book_append_sheet(wb, ws, "Manage Damaged Data");
            XLSX.writeFile(wb, "ManageDamaged.xlsx");
        });
    </script>
<script>
document.addEventListener("DOMContentLoaded", function () {
    const filterButton = document.getElementById("toggleFilterDropdown");
    const filterPanel = document.getElementById("filterDropdownPanel");

    // Dummy data — replace with your actual Razor model values
    const filterData = {
        typeName: @Html.Raw(Json.Serialize(Model.UniqueTypeNames ?? new List<string>())),
        damageReason: @Html.Raw(Json.Serialize(Model.UniqueDamageReasons ?? new List<string>()))
    };

    // Show values inside the right panel
    function showFilterValues(category) {
        const container = document.getElementById("filterValues");
        container.innerHTML = "";

        const values = filterData[category] || [];

        if (values.length === 0) {
            container.innerHTML = "<div class='text-muted'>No values found</div>";
            return;
        }

        values.forEach(function (value) {
            const div = document.createElement("div");
            div.className = "filter-value mb-1";
            const btn = document.createElement("button");
            btn.className = "btn btn-sm w-100 text-start";
            btn.innerText = value;
            btn.value = value;
            btn.onclick = function () {
                applyFilter(category, value);
            };
            div.appendChild(btn);
            container.appendChild(div);
        });

        document.querySelectorAll('.filter-option').forEach(el => el.classList.remove('fw-bold', 'text-dark'));
        document.querySelector(`[onclick="showFilterValues('${category}')"]`).classList.add('fw-bold', 'text-dark');
    }

    // Apply the filter (navigate with query param)
    @* function applyFilter(field, value) {
        const url = new URL(window.location.href);
        url.searchParams.set(field, value);
        window.location.href = url;
    } *@
    function applyFilter(field, value) {
    const url = new URL(window.location.href);

    // Remove the 'handler' parameter if it exists
    url.searchParams.delete("handler");

    // Set the selected filter
    url.searchParams.set(field, value);

    // Optional: clear the other filter if you want only one active at a time
    if (field === "typeName") url.searchParams.delete("damageReason");
    if (field === "damageReason") url.searchParams.delete("typeName");

    // Set or reset page to 1
    url.searchParams.set("page", "1");

    // Redirect with the updated query string
    window.location.href = url;
}


    // Show/hide logic
    filterButton.addEventListener("click", function (e) {
        e.stopPropagation();
        const isVisible = filterPanel.style.display === "flex";
        filterPanel.style.display = isVisible ? "none" : "flex";
        if (!isVisible) showFilterValues('typeName'); // default on open
    });

    document.addEventListener("click", function (e) {
        if (!filterPanel.contains(e.target) && e.target !== filterButton) {
            filterPanel.style.display = "none";
        }
    });

    // Make showFilterValues globally accessible
    window.showFilterValues = showFilterValues;
});
</script>
}
@{

    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4 pb-2">
        <div class="d-block mb-4 mb-md-0">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-transparent p-2 mb-0">
                    <li class="breadcrumb-item d-flex align-items-center">
                        <img src="images/home.png" alt="Home" width="16" height="16" class="me-2" />
                        <a href="/Home" class="text-decoration-none">@Model.lblHome</a>
                    </li>
                    <li class="breadcrumb-item d-flex align-items-center">
                        <img src="images/inventory.png" alt="Home" width="16" height="16" class="me-2" />
                        @Model.lblDamagedItems
                    </li>

                </ol>
            </nav>
            <h2 class="h4">@Model.lblDamagedItems</h2>
            <!-- <p class="mb-0">Your web analytics dashboard template.</p>-->
        </div>

    </div>

<div class="row mb-4 align-items-start">
    <div class="col-auto">
        <button id="exportExcel" class="btn btn-success me-2">Export Excel</button>
        <button id="printBtn" class="btn btn-primary">Print Table</button>
    </div>

        @if (Model.TotalItems > 0)
        {
            <!-- Right: Filter button and dropdown -->
            <div class="col text-end position-relative">
                <button type="button" id="toggleFilterDropdown" class="btn btn-secondary">
                    Filter
                </button>

                <!-- Filter Panel -->
                <div id="filterDropdownPanel"
                class="card shadow-sm position-absolute flex-row"
                style="right: 0; top: 100%; width: 400px; display: none; z-index: 1000; height: 400px; overflow: hidden;">

                    <!-- Left: Filter Categories -->
                    <div class="border-end p-2" style="width: 40%; overflow-y: auto;">
                        <div class="fw-bolder text-center mb-2">Filter By</div>
                        @* <div class="filter-option text-primary mb-2" onclick="showFilterValues('itemName')" style="cursor: pointer;">Item Name</div> *@
                        <div class="filter-option text-primary mb-2" onclick="showFilterValues('typeName')" style="cursor: pointer;">Type Name</div>
                        <div class="filter-option text-primary mb-2" onclick="showFilterValues('damageReason')" style="cursor: pointer;">Damage Reason</div>
                    </div>

                    <!-- Right: Unique Values -->
                    <div class="p-2" id="filterValues"
                    style="width: 60%; overflow-y: auto; border-left: 1px solid #eee;">
                        <div class="text-muted">Select a filter from left</div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="table-settings mb-4">
        <form method="post" asp-page-handler="Action" class="row align-items-center">

            <div class="col col-lg-3 col-xl-3">
                <div class="input-group me-2 me-lg-3 fmxw-400">
                    <span class="input-group-text">
                        <svg class="icon icon-xs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path>
                        </svg>
                    </span>
                    <input type="text" name="ItemName" class="form-control" placeholder="@Model.lblItemName" value="@Model.ItemName">
                </div>
            </div>

            <div class="col-4 col-md-2 col-xl-1 ps-md-0">
                <button type="submit" name="action" value="search" class="btn btn-primary">@Model.lblSubmit</button>
            </div>

            <div class="col text-end position-relative">
                <button type="button" id="toggleDropdown" class="btn btn-secondary">
                    @Model.lblShowHideColumn
                </button>

                <!-- DROPDOWN PANEL GOES HERE -->
                <div id="dropdownPanel" class="card p-2 shadow-sm position-absolute"
                    style="right: 0; top: 100%; width: 200px; display: none; z-index: 1000;">
                    
                    <!-- Your checkboxes here -->
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="itemCode" id="itemCode"
                        @(Model.SelectedColumns.Contains("itemCode") ? "checked" : "")>
                        <label class="form-check-label" for="itemCode">@Model.lblItemCode</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="itemName" id="itemName"
                        @(Model.SelectedColumns.Contains("itemName") ? "checked" : "")>
                        <label class="form-check-label" for="itemName">@Model.lblItemName</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="damagedQuantity" id="damagedQuantity"
                        @(Model.SelectedColumns.Contains("damagedQuantity") ? "checked" : "")>
                        <label class="form-check-label" for="damagedQuantity">@Model.lblDamagedQuantity</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="typeName" id="typeName"
                        @(Model.SelectedColumns.Contains("typeName") ? "checked" : "")>
                        <label class="form-check-label" for="typeName">@Model.lblTypeName</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="unitCode" id="unitCode"
                        @(Model.SelectedColumns.Contains("unitCode") ? "checked" : "")>
                        <label class="form-check-label" for="unitCode">@Model.lblUnitCode</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="damageReason" id="damageReason"
                        @(Model.SelectedColumns.Contains("damageReason") ? "checked" : "")>
                        <label class="form-check-label" for="damageReason">@Model.lblDamageReason</label>
                    </div>

                    <div class="form-check mb-1 text-center">
                        <button type="submit" name="action" value="updateColumns" class="btn btn-success btn-sm">Ok</button>
                    </div>

                </div>
            </div>

        </form>
    </div>


    <div class="d-flex align-items-center justify-content-between">
        <div></div>
        <div>
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Page navigation">
                    <ul class="pagination">

                        @* Previous button *@
                        @if (Model.CurrentPage > 1)
                        {

                            <li class="page-item">
                                <a class="page-link" href="?page=@(Model.CurrentPage - 1)&ItemName=@Model.ItemName">&laquo;</a>
                            </li>
                        }

                        @* Show pages normally if the total pages are less than or equal to 10 *@
                        @if (Model.TotalPages <= 10)
                        {
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="?page=@i&ItemName=@Model.ItemName">@i</a>
                                </li>
                            }
                        }
                        else
                        {
                            @* Show the first page, then ellipsis if there are skipped pages *@
                            @if (Model.CurrentPage > 3)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="?page=1&ItemName=@Model.ItemName">1</a>
                                </li>
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }

                            @* Show pages from (current-1) to (current+1) *@
                            @for (int i = Math.Max(1, Model.CurrentPage - 1); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 1); i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="?page=@i&ItemName=@Model.ItemName">@i</a>
                                </li>
                            }

                            @* Add "..." if there are skipped pages after the current page *@
                            @if (Model.CurrentPage < Model.TotalPages - 1)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }

                            @* Show the last page, if it's not already visible *@
                            @if (Model.CurrentPage < Model.TotalPages - 2)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="?page=@Model.TotalPages&ItemName=@Model.ItemName">@Model.TotalPages</a>
                                </li>
                            }
                        }

                        @* Last buttons *@
                        @if (Model.CurrentPage < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="?page=@(Model.CurrentPage + 1)&ItemName=@Model.ItemName">&raquo;</a>
                            </li>

                        }

                    </ul>
                </nav>
            }
        </div>

    </div>
    

}


<div class="card border-0 shadow mb-4">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-centered table-nowrap mb-0 rounded">
                <thead class="thead-light">
                    <tr>
                        @if (Model.SelectedColumns.Contains("itemCode"))
                        {
                        <th scope="col" class="border-0 rounded-start">@Model.lblItemCode</th>
                        }
                        @if (Model.SelectedColumns.Contains("itemName"))
                        {
                        <th scope="col" class="border-0">@Model.lblItemName</th>
                        }
                        @if (Model.SelectedColumns.Contains("damagedQuantity"))
                        {
                        <th scope="col" class="border-0">@Model.lblDamagedQuantity</th>
                        }
                        @if (Model.SelectedColumns.Contains("typeName"))
                        {
                        <th scope="col" class="border-0">@Model.lblTypeName</th>
                        }
                        @if (Model.SelectedColumns.Contains("unitCode"))
                        {
                        <th scope="col" class="border-0">@Model.lblUnitCode</th>
                        }
                        @if (Model.SelectedColumns.Contains("damageReason"))
                        {
                        <th scope="col" class="border-0">@Model.lblDamageReason</th>
                        }

                        <th class="border-0 rounded-end"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Items != null)
                    {
                        foreach (var item in Model.Items)
                        {
                            <tr>
                                @if (Model.SelectedColumns.Contains("itemCode"))
                                {
                                <th scope="row">@item.ItemCode</th>
                                }
                                @if (Model.SelectedColumns.Contains("itemName"))
                                {
                                <td>@item.ItemName</td>
                                }
                                @if (Model.SelectedColumns.Contains("damagedQuantity"))
                                {
                                <td>@item.DamagedQuantity</td>
                                }
                                @if (Model.SelectedColumns.Contains("typeName"))
                                {
                                <td>@item.TypeName</td>
                                }
                                @if (Model.SelectedColumns.Contains("unitCode"))
                                {
                                <td>@item.UnitCode</td>
                                }
                                @if (Model.SelectedColumns.Contains("damageReason"))
                                {
                                <td>@item.DamageReason</td>
                                }

                            </tr>
                        }
                    }

                    <tr>
                        <td class="border-0" colspan="8">
                            <div>@Model.lblTotalItem : @Model.TotalItems</div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@* <div style="color:maroon; text-align:center">@Model.Message</div> *@



@if (Model.TotalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination">

            @* Previous button *@
            @if (Model.CurrentPage > 1)
            {

                <li class="page-item">
                    <a class="page-link" href="?page=@(Model.CurrentPage - 1)&ItemName=@Model.ItemName">&laquo;</a>
                </li>
            }

            @* Show pages normally if the total pages are less than or equal to 10 *@
            @if (Model.TotalPages <= 10)
            {
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="?page=@i&ItemName=@Model.ItemName">@i</a>
                    </li>
                }
            }
            else
            {
                @* Show the first page, then ellipsis if there are skipped pages *@
                @if (Model.CurrentPage > 3)
                {
                    <li class="page-item">
                        <a class="page-link" href="?page=1&ItemName=@Model.ItemName">1</a>
                    </li>
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }

                @* Show pages from (current-1) to (current+1) *@
                @for (int i = Math.Max(1, Model.CurrentPage - 1); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 1); i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="?page=@i&ItemName=@Model.ItemName">@i</a>
                    </li>
                }

                @* Add "..." if there are skipped pages after the current page *@
                @if (Model.CurrentPage < Model.TotalPages - 1)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }

                @* Show the last page, if it's not already visible *@
                @if (Model.CurrentPage < Model.TotalPages - 2)
                {
                    <li class="page-item">
                        <a class="page-link" href="?page=@Model.TotalPages&ItemName=@Model.ItemName">@Model.TotalPages</a>
                    </li>
                }
            }

            @* Last buttons *@
            @if (Model.CurrentPage < Model.TotalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="?page=@(Model.CurrentPage + 1)&ItemName=@Model.ItemName">&raquo;</a>
                </li>

            }

        </ul>
    </nav>
}
    <div class="table-responsive" id="exportTableContainer" style="display: none;">
        <table class="table table-centered table-nowrap mb-0 rounded" id="exportTable">
            <thead class="thead-light">
                <tr>
                    
                     @if (Model.SelectedColumns.Contains("itemCode"))
                        {
                        <th scope="col" class="border-0 rounded-start">@Model.lblItemCode</th>
                        }
                        @if (Model.SelectedColumns.Contains("itemName"))
                        {
                        <th scope="col" class="border-0">@Model.lblItemName</th>
                        }
                        @if (Model.SelectedColumns.Contains("damagedQuantity"))
                        {
                        <th scope="col" class="border-0">@Model.lblDamagedQuantity</th>
                        }
                        @if (Model.SelectedColumns.Contains("typeName"))
                        {
                        <th scope="col" class="border-0">@Model.lblTypeName</th>
                        }
                        @if (Model.SelectedColumns.Contains("unitCode"))
                        {
                        <th scope="col" class="border-0">@Model.lblUnitCode</th>
                        }
                        @if (Model.SelectedColumns.Contains("damageReason"))
                        {
                        <th scope="col" class="border-0">@Model.lblDamageReason</th>
                        }
                </tr>  
            </thead>
            <tbody>
                @if (Model.ItemsAll != null)
                {
                    
                    foreach (var item in Model.ItemsAll)
                    {
                        <tr>
                           @if (Model.SelectedColumns.Contains("itemCode"))
                                {
                                <th scope="row">@item.ItemCode</th>
                                }
                                @if (Model.SelectedColumns.Contains("itemName"))
                                {
                                <td>@item.ItemName</td>
                                }
                                @if (Model.SelectedColumns.Contains("damagedQuantity"))
                                {
                                <td>@item.DamagedQuantity</td>
                                }
                                @if (Model.SelectedColumns.Contains("typeName"))
                                {
                                <td>@item.TypeName</td>
                                }
                                @if (Model.SelectedColumns.Contains("unitCode"))
                                {
                                <td>@item.UnitCode</td>
                                }
                                @if (Model.SelectedColumns.Contains("damageReason"))
                                {
                                <td>@item.DamageReason</td>
                                }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>



