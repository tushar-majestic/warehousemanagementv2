@page
@model LabMaterials.Pages.HomeModel
@{
    // // Prepare all chart data in Razor
    // string[] labelArr = Model.LineChartLabels?.Split(',').Select(s => s.Trim()).ToArray() ?? Array.Empty<string>();
    // string[] labelArr1 = Model.LineChartLabelssupplies?.Split(',').Select(s => s.Trim()).ToArray() ?? Array.Empty<string>();
    // var allLabels = labelArr.Concat(labelArr1)
    // .Select(s => s.Trim())
    // .Where(s => !string.IsNullOrWhiteSpace(s))
    // .Distinct() // Optional: remove duplicates
    // .ToArray();

    // string joined = string.Join(",", allLabels);

    // int[] suppliesDataArr = Model.SuppliesData?.Split(',').Select(s => int.TryParse(s.Trim(), out var v) ? v : 0).ToArray() ?? Array.Empty<int>();
    // int[] disburseDataArr = Model.DisbursementData?.Split(',').Select(s => int.TryParse(s.Trim(), out var v) ? v : 0).ToArray() ?? Array.Empty<int>();
    // string lblSupplies = Model.lblSupplies ?? "Supplies";
    // string lblDisburse = Model.lblDisbursement ?? "Disbursement";
    
    // Parse labels from CSV strings
    string[] disbLabels = Model.LineChartLabels?.Split(',').Select(s => s.Trim()).ToArray() ?? Array.Empty<string>();
    string[] suppLabels = Model.LineChartLabelssupplies?.Split(',').Select(s => s.Trim()).ToArray() ?? Array.Empty<string>();

    // Combine and normalize labels
    var allLabels = disbLabels
        .Concat(suppLabels)
        .Where(s => !string.IsNullOrWhiteSpace(s))
        .Select(s => s.Trim())
        .Distinct()
        .OrderBy(s => DateTime.TryParseExact(s, "MMM yyyy", null, System.Globalization.DateTimeStyles.None, out var dt) ? dt : DateTime.MaxValue)
        .ToArray();

    // Parse data values and map them to their labels
    var disbDataDict = disbLabels
        .Select((label, index) => new { label, value = Model.DisbursementData?.Split(',').ElementAtOrDefault(index) })
        .Where(x => !string.IsNullOrWhiteSpace(x.label) && int.TryParse(x.value?.Trim(), out _))
        .ToDictionary(x => x.label, x => int.Parse(x.value));

    var suppDataDict = suppLabels
        .Select((label, index) => new { label, value = Model.SuppliesData?.Split(',').ElementAtOrDefault(index) })
        .Where(x => !string.IsNullOrWhiteSpace(x.label) && int.TryParse(x.value?.Trim(), out _))
        .ToDictionary(x => x.label, x => int.Parse(x.value));

    // Align data with full label set (insert null if not found)
    var alignedDisbData = allLabels
        .Select(label => disbDataDict.TryGetValue(label, out var v) ? v : (int?)0)
        .ToArray();

    var alignedSuppData = allLabels
        .Select(label => suppDataDict.TryGetValue(label, out var v) ? v : (int?)0)
        .ToArray();

    // Chart labels
    string lblSupplies = Model.lblSupplies ?? "Supplies";
    string lblDisburse = Model.lblDisbursement ?? "Disbursement";
}

}
@section Scripts
{
    <script type="text/javascript" language="javascript">
         const notyf = new Notyf({
         position: {
         x: 'center',
         y: 'top',
         },
         types: [
         {
         type: 'error',
         background: '#e3392c',
         icon: {
         className: 'fas fa-times',
         tagName: 'span',
         color: '#000000'
                     },
                     dismissible: true,
                     duration: 0,
                     ripple: true
         }
         ]
         });
         function checkDates() {

         var startDate = document.getElementById("startDate").value;
         var endDate = document.getElementById("endDate").value;
         if (startDate && endDate) {
         document.getElementById("dateForm").submit();
         }
         }
         function showErrorNotification(message) {
         notyf.open({
         type: 'error',
         message: message
         });
         }

        @if (!string.IsNullOrEmpty(Model.ErrorMsg))
        {
            <text>
                     var errorMessageFromServer = @Html.Raw(Json.Serialize(Model.ErrorMsg));
                     showErrorNotification(errorMessageFromServer);
            </text>
        }
         // Function to create pie chart
         // Function to create pie chart
         // Function to create pie chart
                // Define reusable function to create chart
         var chartInstances = {};

         function createPieChart(canvasId, data, labels, backgroundColor) {
             const ctx = document.getElementById(canvasId).getContext('2d');

             // Destroy old chart if it exists
             if (chartInstances[canvasId]) {
                 chartInstances[canvasId].destroy();
             }

             const chart = new Chart(ctx, {
                 type: 'pie',
                 data: {
                     datasets: [{
                         data: data,
                         backgroundColor: backgroundColor,
                         labels: labels
                     }]
                 },
                 options: {
                     plugins: {
                         legend: {
                             display: false
                         },
                         tooltip: {
                             enabled: true,
                             callbacks: {
                                 label: function (context) {
                                     var label = context.dataset.labels[context.dataIndex] || '';
                                     var value = context.formattedValue;
                                     return label + ': ' + value;
                                 }
                             }
                         }
                     },
                     hover: {
                         mode: 'nearest',
                         intersect: true
                     }
                 }
             });

             chartInstances[canvasId] = chart; // Save reference
             return chart;
         }

         // Setup data arrays (you already generate them with Razor syntax)
         var data1 = [@{
            var valuesArray = Model.Data1Values.Split(','); foreach (var value in valuesArray)
            {
                <text>@value,</text>
            }
        }];
         var labels1 = [@{
            var labelArray3 = Model.LabelValues.Split(','); foreach (var label in labelArray3)
            {
                <text>"@label",</text>
            }
        }];
         var backgroundColor1 = [@{
            var colorsArray = Model.Data1Colors.Split(','); foreach (var color in colorsArray)
            {
                <text>"@color",</text>
            }
        }];

         var data2 = [@{
            var valuesArray1 = Model.Data2Values.Split(','); foreach (var value in valuesArray1)
            {
                <text>@value,</text>
            }
        }];
         var labels2 = [@{
            var labelArray2 = Model.LabelValues1.Split(','); foreach (var label in labelArray2)
            {
                <text>"@label",</text>
            }
        }];
         var backgroundColor2 = [@{
            var colorsArray1 = Model.Data2Colors.Split(','); foreach (var color in colorsArray1)
            {
                <text>"@color",</text>
            }
        }];

         // Create the pie charts
         var pieChart1 = createPieChart('pieChart1', data1, labels1, backgroundColor1);
         var pieChart2 = createPieChart('pieChart2', data2, labels2, backgroundColor2);

         //line chart
         //line chart
         //line chart
         //line chart
        document.addEventListener('DOMContentLoaded', () => {


             // Line chart
             const canvas = document.getElementById('lineChart');
             const ctx = canvas?.getContext('2d');
             if (!ctx) return;

             const gradientSup = ctx.createLinearGradient(0, 0, 0, canvas.height);
             gradientSup.addColorStop(0, 'rgba(13, 148, 136, 0.35)');
             gradientSup.addColorStop(0.9, 'rgba(13, 148, 136, 0.05)');

             const gradientDis = ctx.createLinearGradient(0, 0, 0, canvas.height);
             gradientDis.addColorStop(0, 'rgba(220, 38, 38, 0.35)');
             gradientDis.addColorStop(0.9, 'rgba(220, 38, 38, 0.05)');

             new Chart(ctx, {
                 type: 'line',
                 data: {
                    labels: @Html.Raw(Json.Serialize(allLabels)),
                     datasets: [
                         {
                             label: @Html.Raw(Json.Serialize(lblSupplies)),
                             data: @Html.Raw(Json.Serialize(alignedSuppData)),
                             borderColor: 'rgb(13, 148, 136)',
                             backgroundColor: gradientSup,
                             borderWidth: 2,
                             tension: 0.3,
                             pointRadius: 0,
                             pointHoverRadius: 5,
                             fill: true
                         },
                         {
                             label: @Html.Raw(Json.Serialize(lblDisburse)),
                             data: @Html.Raw(Json.Serialize(alignedDisbData)),
                             borderColor: 'rgb(220, 38, 38)',
                             backgroundColor: gradientDis,
                             borderWidth: 2,
                             tension: 0.3,
                             pointRadius: 0,
                             pointHoverRadius: 5,
                             fill: true
                         }
                     ]
                 },
                 options: {
                     responsive: true,
                     maintainAspectRatio: false,
                     plugins: {
                         legend: {
                             display: true,
                             position: 'top',
                             align: 'center',
                             labels: {
                                 boxWidth: 12,
                                 padding: 16,
                                 font: { weight: 'bold' }
                             }
                         },
                         tooltip: {
                             callbacks: {
                                 title: ctx => ctx[0].label
                             }
                         }
                     },
                     scales: {
                         x: {
                             grid: { color: 'rgba(0,0,0,0.05)' },
                             ticks: { maxRotation: 60, minRotation: 45 }
                         },
                         y: {
                             beginAtZero: true,
                             grid: { color: 'rgba(0,0,0,0.08)' },
                             title: {
                                 display: true,
                                 text: 'Quantity',
                                 font: { weight: '600' }
                             },
                              ticks: {
                                    // Force whole numbers
                                    callback: function(value) {
                                        if (Number.isInteger(value)) return value;
                                    },
                                    stepSize: 1  // Optional: specify the step size if you want fixed intervals
                                }
                         }
                     }
                 }
             });
         });






    </script>
}
@{

    // <div class="py-4">
    //     <div class="dropdown">
    //         <button class="btn btn-gray-800 d-inline-flex align-items-center me-2 dropdown-toggle" data-bs-toggle="dropdown"
    //             aria-haspopup="true" aria-expanded="false">
    //             @Model.lblHome
    //         </button>
    //     </div>
    // </div>


    <div class="row">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb bg-transparent p-2 mb-0">
                <li class="breadcrumb-item d-flex align-items-center">
                    <img src="images/home.png" alt="Home" width="16" height="16" class="me-2" />
                    @Model.lblHome
                </li>
            </ol>
        </nav>

        @if (Model.ItemCardminimum?.Count > 0 || Model.ItemCardCeiling?.Count > 0 || Model.ItemCardReorder?.Count > 0 || Model.ItemCardNotMoved?.Count > 0)
        {
            <div>
                <div class="alert alert-info d-flex flex-column">
                    @if (Model.ItemCardminimum?.Count > 0)
                    {
                        <div>
                            <div class="mb-2">
                                <span><img src="images/alert.png" alt="alert" /> <b>@Model.lblAlert</b> @Model.ItemCardminimum.Count @Model.lblMinimumQuantity</span>
                                <a class="btn btn-sm btn-primary ms-2" href="/Alerts/Index#sectionn-minimum">@Model.lblView</a>
                            </div>
                        </div>
                    }

                    @if (Model.ItemCardCeiling?.Count > 0)
                    {
                        <div>
                            <div class="mb-2">
                                <span><img src="images/alert.png" alt="alert" /> <b>@Model.lblAlert</b> @Model.ItemCardCeiling.Count @Model.lblMaximumQuantity</span>
                                <a class="btn btn-sm btn-primary ms-2" href="/Alerts/Index#sectionn-maximum">@Model.lblView</a>
                            </div>
                        </div>
                    }


                    @if (Model.ItemCardReorder?.Count > 0)
                    {
                        <div>
                            <div class="mb-2">
                                <span><img src="images/alert.png" alt="alert" /> <b>@Model.lblAlert</b> @Model.ItemCardReorder.Count @Model.lblReorderQuantity</span>
                                <a class="btn btn-sm btn-primary ms-2" href="/Alerts/Index#sectionn-reorder">@Model.lblView</a>
                            </div>
                        </div>
                    }


                    @if (Model.ItemCardNotMoved?.Count > 0)
                    {
                        <div>
                            <div class="mb-0">
                                <span><img src="images/alert.png" alt="alert" /> <b>@Model.lblAlert</b> @Model.ItemCardNotMoved.Count @Model.lblNotMoved3</span>
                                <a class="btn btn-sm btn-primary ms-2" href="/Alerts/Index#sectionn-notmoved">@Model.lblView</a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }






        <div class="col-12 col-sm-6 col-xl-4 mb-4">
            <div class="card border-0 shadow">
                <div class="card-body">
                    <div class="row d-block d-xl-flex align-items-center">
                        <div class="col-12 col-xl-3 text-xl-center mb-3 mb-xl-0 d-flex align-items-start justify-content-xl-center">
                            <div class="icon-shape icon-shape-primary rounded me-4 me-sm-0">
                                <img class="icon" src="images/store.png" />
                            </div>
                            <div class="d-sm-none">
                                <h2 class="h5">@Model.lblTotalStores</h2>
                                <h3 class="fw-extrabold mb-1">@Model.countStores</h3>
                            </div>
                        </div>
                        <div class="col-12 col-xl-9 px-xl-0">
                            <div class="d-none d-sm-block">
                                <h2 class="h6 text-gray-400 mb-0">@Model.lblTotalStores</h2>
                                <h3 class="fw-extrabold mb-2">@Model.countStores</h3>
                            </div>
                            @* <small class="d-flex align-items-center text-gray-500">
                        Feb 1 - Apr 1
                        </small> *@

                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-sm-6 col-xl-4 mb-4">
            <div class="card border-0 shadow">
                <div class="card-body">
                    <div class="row d-block d-xl-flex align-items-center">
                        <div class="col-12 col-xl-3 text-xl-center mb-3 mb-xl-0 d-flex align-items-start justify-content-xl-center">
                            <div class="icon-shape icon-shape-primary rounded me-4 me-sm-0">
                                <img class="icon" src="images/users.png" />
                            </div>
                            <div class="d-sm-none">
                                <h2 class="h5">@Model.lblTotalUsers</h2>
                                <h3 class="fw-extrabold mb-1">@Model.countUsers</h3>
                            </div>
                        </div>
                        <div class="col-12 col-xl-9 px-xl-0">
                            <div class="d-none d-sm-block">
                                <h2 class="h6 text-gray-400 mb-0">@Model.lblTotalUsers</h2>
                                <h3 class="fw-extrabold mb-2">@Model.countUsers</h3>
                            </div>
                            @* <small class="d-flex align-items-center text-gray-500">
                        Feb 1 - Apr 1
                        </small> *@

                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-sm-6 col-xl-4 mb-4">
            <div class="card border-0 shadow">
                <div class="card-body">
                    <div class="row d-block d-xl-flex align-items-center">
                        <div class="col-12 col-xl-3 text-xl-center mb-3 mb-xl-0 d-flex align-items-start justify-content-xl-center">
                            <div class="icon-shape icon-shape-primary rounded me-4 me-sm-0">
                                <img class="icon" src="images/list-items.png" />
                            </div>
                            <div class="d-sm-none">
                                <h2 class="h5">@Model.lblTotalItems</h2>
                                <h3 class="fw-extrabold mb-1">@Model.countItems</h3>
                            </div>
                        </div>
                        <div class="col-12 col-xl-9 px-xl-0">
                            <div class="d-none d-sm-block">
                                <h2 class="h6 text-gray-400 mb-0">@Model.lblTotalItems</h2>
                                <h3 class="fw-extrabold mb-2">@Model.countItems</h3>
                            </div>
                            @* <small class="d-flex align-items-center text-gray-500">
                        Feb 1 - Apr 1
                        </small> *@

                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-sm-6 col-xl-4 mb-4">
            <div class="card border-0 shadow">
                <div class="card-body">
                    <div class="row d-block d-xl-flex align-items-center">
                        <div class="col-12 col-xl-3 text-xl-center mb-3 mb-xl-0 d-flex align-items-start justify-content-xl-center">
                            <div class="icon-shape icon-shape-primary rounded me-4 me-sm-0">
                                <img class="icon" src="images/des-supplies.png" />
                            </div>
                            <div class="d-sm-none">
                                <h2 class="h5">@Model.lblSupplies</h2>
                                <h3 class="fw-extrabold mb-1">@Model.countSupplies</h3>
                            </div>
                        </div>
                        <div class="col-12 col-xl-9 px-xl-0">
                            <div class="d-none d-sm-block">
                                <h2 class="h6 text-gray-400 mb-0">@Model.lblSupplies</h2>
                                <h3 class="fw-extrabold mb-2">@Model.countSupplies</h3>
                            </div>
                            @* <small class="d-flex align-items-center text-gray-500">
                        Feb 1 - Apr 1
                        </small> *@

                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-sm-6 col-xl-4 mb-4">
            <div class="card border-0 shadow">
                <div class="card-body">
                    <div class="row d-block d-xl-flex align-items-center">
                        <div class="col-12 col-xl-3 text-xl-center mb-3 mb-xl-0 d-flex align-items-start justify-content-xl-center">
                            <div class="icon-shape icon-shape-primary rounded me-4 me-sm-0">
                                <img class="icon" src="images/Disbursement.png" />
                            </div>
                            <div class="d-sm-none">
                                <h2 class="h5">@Model.lblDisbursement</h2>
                                <h3 class="fw-extrabold mb-1">@Model.countdisbursement</h3>
                            </div>
                        </div>
                        <div class="col-12 col-xl-9 px-xl-0">
                            <div class="d-none d-sm-block">
                                <h2 class="h6 text-gray-400 mb-0">@Model.lblDisbursement</h2>
                                <h3 class="fw-extrabold mb-2">@Model.countdisbursement</h3>
                            </div>
                            @* <small class="d-flex align-items-center text-gray-500">
                        Feb 1 - Apr 1
                        </small> *@

                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-12 px-0 col-sm-6 col-xl-4 mb-4">

            <div class="card-body">
                <form id="dateForm" method="get">
                    <div class="row align-items-center">
                        <div class="col-6 mb-xl-0">
                            <div class="mb-2">
                                <label for="startDate" class="form-label">@Model.lblFromDate</label>
                                <input asp-for="FromDate" type="date" class="form-control form-control-sm" id="startDate" name="startDate" value="@Model.FromDate" onchange="checkDates()">
                            </div>
                        </div>
                        <div class="col-6  mb-xl-0">
                            <div class="mb-2">
                                <label for="endDate" class="form-label">@Model.lblToDate</label>
                                <input asp-for="ToDate" type="date" class="form-control form-control-sm" id="endDate" name="endDate" value="@Model.ToDate" onchange="checkDates()">
                            </div>
                        </div>
                    </div>
                </form>
            </div>


        </div>

    </div>
    <div class="row">
        <div class="col-12  ">
            <div class="card border-0 shadow">
                <div class="card-header card-head d-sm-flex flex-row align-items-center flex-0">
                    <div class="d-block  mb-sm-0">
                        <h5 class="fw-extrabold">@Model.lblSuppliesAndDisbursements</h5>
                    </div>
                </div>
                <div class="card-body">

                    <!-- Canvas element for the chart -->
                    <canvas id="lineChart" style="height: 400px;"></canvas>


                </div>
            </div>
        </div>




        <div class="col-6 mt-3">
            <div class="card  pb-5 mb-5   border-0 shadow">

                <div class="card-header card-head d-sm-flex flex-row align-items-center flex-0">
                    <div class="d-block mb-3 mb-sm-0">
                        <h5 class=" fw-extrabold">@Model.lblItems</h5>

                    </div>

                </div>


                <div class="text-center mt-4">
                </div>
                <canvas id="pieChart2" class="pie-chart mt-2 p-3"></canvas>

            </div>
        </div>




        <div class="col-6  mt-3 ">
            <div class="card pb-5 border-0 shadow">

                <div class="card-header card-head d-sm-flex flex-row align-items-center flex-0">
                    <div class="d-block mb-3 mb-sm-0">
                        <h5 class=" fw-extrabold">@Model.lblDisbursement</h5>

                    </div>
                </div>

                <div class="text-center mt-4">
                </div>
                <canvas id="pieChart1" class="pie-chart mt-2 p-3"></canvas>

            </div>
        </div>











    </div>

    <!-- Index.cshtml -->





    <div class="row">
        <div class="col-4 mb-4">
            <div class="card  border-0 shadow dash-table">
                <div class="card-header card-head d-sm-flex flex-row align-items-center flex-0">
                    <div class="d-block mb-3 mb-sm-0">
                        <h5 class=" fw-extrabold">@Model.lblMostRequestingDestination</h5>
                    </div>
                </div>
                <div class="card-body">

                    <table class="table table-centered table-nowrap mb-0 rounded">
                        <thead class="thead-light">
                            <tr>
                                <th scope="col" class="border-0 rounded-start">@Model.lblDestinationName</th>
                                <th scope="col" class="border-0">@Model.lblCount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.MostRequestingDestination != null)
                            {
                                foreach (var item in Model.MostRequestingDestination)
                                {
                                    <tr>
                                        <th scope="row">@item.DestinationName</th>
                                        <td>@item.Count</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>


                </div>

            </div>
        </div>

        <div class="col-4 mb-4">
            <div class="card  border-0 shadow dash-table">
                <div class="card-header card-head d-sm-flex flex-row align-items-center flex-0">
                    <div class="d-block mb-3 mb-sm-0">
                        <h5 class=" fw-extrabold">@Model.lblFastMovingItem</h5>
                    </div>
                </div>
                <div class="card-body">
                    <table class="table table-centered table-nowrap mb-0 rounded">
                        <thead class="thead-light">
                            <tr>
                                <th scope="col" class="border-0 rounded-start">@Model.lblItemName</th>
                                <th scope="col" class="border-0">@Model.lblCount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.FastMovingItem != null)
                            {
                                foreach (var item in Model.FastMovingItem)
                                {
                                    <tr>
                                        <th scope="row">@item.ItemCode</th>
                                        <td>@item.Count</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>

                </div>

            </div>
        </div>


        <div class="col-4 mb-4">
            <div class="card  border-0 shadow dash-table">
                <div class="card-header card-head d-sm-flex flex-row align-items-center flex-0">
                    <div class="d-block mb-3 mb-sm-0">
                        <h5 class=" fw-extrabold">@Model.lblLowInventoryItem</h5>
                    </div>
                </div>
                <div class="card-body">
                    <table class="table table-centered table-nowrap mb-0 rounded">
                        <thead class="thead-light">
                            <tr>
                                <th scope="col" class="border-0 rounded-start">@Model.lblItemName</th>
                                <th scope="col" class="border-0">@Model.lblCount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.LowInventoryItem != null)
                            {
                                foreach (var item in Model.LowInventoryItem)
                                {
                                    <tr>
                                        <th scope="row">@item.ItemName</th>
                                        <td>@item.Count</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>


                </div>

            </div>
        </div>


    </div>




    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>


    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

}
