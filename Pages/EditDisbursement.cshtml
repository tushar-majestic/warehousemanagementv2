@page
@model LabMaterials.Pages.EditDisbursementModel
@section Scripts
{
    <script type="text/javascript" language="javascript">
        const notyf = new Notyf({
            position: {
                x: 'center',
                y: 'top',
            },
            types: [
                {
                    type: 'error',
                    background: '#e3392c',
                    icon: {
                        className: 'fas fa-times',
                        tagName: 'span',
                        color: '#000000'
                    },
                    dismissible: true,
                    duration: 0,
                    ripple: true
                }
            ]
        });

        function showErrorNotification(message) {
            notyf.open({
                type: 'error',
                message: message
            });
        }

        @if (!string.IsNullOrEmpty(Model.ErrorMsg))
        {
            <text>
                                var errorMessageFromServer = @Html.Raw(Json.Serialize(Model.ErrorMsg));
            showErrorNotification(errorMessageFromServer);
            </text>
        }
            $(document).ready(function () {
                var initialStoreId = $('#StoreId').val();
                var initialSelectedItemId = @ViewData["ItemId"]?.ToString();
                var initialDId = @ViewData["DId"];
                var requestId = @ViewData["rId"];
                console.log("initialSelectedItemId:", initialSelectedItemId);
                var ItemInfoByStore;
                console.log("StoreId:", initialStoreId);
                function loadRoomsForStore(storeId) {
                    $.ajax({
                        url: '?handler=ItemsFromStore',
                        method: 'GET',
                        data: { storeId: storeId },
                        success: function (data) {
                            console.log('Data:', data);
                            ItemInfoByStore = data;
                            console.log('Received ItemInfoByStore:', ItemInfoByStore);
                            var itemDropdown = $('#ItemId');
                            var itemCodeField = $('#ItemCode');
                            var itemTypeCodeField = $('#ItemTypeCode');
                            itemDropdown.empty();
                            ItemInfoByStore.forEach(function (item) {
                                console.log('Appending item:', item);
                                itemDropdown.append($('<option></option>').val(item.itemId).text(item.itemName));
                            });
                            // Fill the non-editable fields with the corresponding values
                            var selectedItemId = initialSelectedItemId;
                            console.log('selectedItemId:', selectedItemId);
                            var selectedItem = ItemInfoByStore.find(item => item.itemId == selectedItemId);
                            console.log('selectedItem:', selectedItem);

                            if (selectedItem) {
                                itemDropdown.val(selectedItem.itemId);
                                itemCodeField.val(selectedItem.itemCode);
                                itemTypeCodeField.val(selectedItem.itemTypeCode);
                            }
                        },
                        error: function (xhr, textStatus, errorThrown) {
                            console.error('Error:', textStatus);
                        }
                    });
                }
                function loadRequesterName(selectedDId) {
                    $.ajax({
                        url: '?handler=RequesterName',
                        method: 'GET',
                        data: { DId: selectedDId },

                        success: function (data) {
                            console.log(data, "jhadsgfeaghfkjsdkg");
                            var requesterDropdown = $('#RequesterName');
                            requesterDropdown.empty(); // Clear existing options
                            data.forEach(function (room) {
                                console.log("Req:", room.reqName);

                                requesterDropdown.append($('<option></option>').text(room.reqName));

                            });
                            var selectedId = requestId;
                            console.log('requestorID:', selectedId);
                            var selectdItem = data.find(item => item.reqId == selectedId);
                            console.log('requestor:', selectdItem);

                            if (selectdItem) {
                                requesterDropdown.val(selectdItem.reqName);
                                
                            }
                        },
                        error: function (xhr, textStatus, errorThrown) {
                            console.error('Error:', textStatus);
                        }
                    });
                }

                loadRoomsForStore(initialStoreId);
                loadRequesterName(initialDId);

                $('#StoreId').on('change', function () {
                    var storeId = $(this).val();
                    loadRoomsForStore(storeId);
                });

                $('#DId').on('change', function () {
                    var selectedDId = $(this).val();
                    loadRequesterName(selectedDId);
                });

                // Update non-editable fields when the item dropdown changes
                $('#ItemId').on('change', function () {
                   
                    var selectedItemId = $(this).val();
                    console.log('Selected ItemId:', selectedItemId);
                    var selectedItem = ItemInfoByStore.find(item => item.itemId == selectedItemId);
                    console.log('Selected Item:', selectedItem);
                    if (selectedItem) {
                        console.log('Selected :', selectedItem);
                        $('#ItemCode').val(selectedItem.itemCode);
                        $('#ItemTypeCode').val(selectedItem.itemTypeCode);
                    }
                });
            });

    </script>
}
@{
    <div class="py-4">

        <div class="d-flex justify-content-between w-100 flex-wrap">
            <div class="mb-3 mb-lg-0">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb bg-transparent p-2 mb-0">
                        <li class="breadcrumb-item d-flex align-items-center active" aria-current="page">
                            <img src="images/expenses.png" alt="Home" width="16" height="16" class="me-2" />
                             <a href="/Disbursements" class="text-decoration-none">@Model.lblDisbursements</a>
                        </li>
                          <li class="breadcrumb-item d-flex align-items-center active" aria-current="page">
                            <img src="images/expenses.png" alt="Home" width="16" height="16" class="me-2" />
                             @Model.lblEditDisbursement
                        </li>
                    </ol>
                </nav>
                <h1 class="h4">@Model.lblEditDisbursement</h1>
                <!-- <p class="mb-0">Dozens of reusable components built to provide buttons, alerts, popovers, and more.</p> -->
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-8 mb-4 m-auto">
            <div class="card border-0 shadow components-section">
                <form method="post" class="card-body">
                    <div class="row mb-4">

                        <input type="hidden" name="DisbursementID" value="@Model.DisbursementID" />

                        <div class="col-lg-12 col-sm-12">
                            <div class="mb-4">
                                <label for="RequestingPlace">@Model.lblRequestingPlace</label>
                                <select class="form-select" id="DId" name="DId">
                                    @if (Model.Destinations != null)
                                    {
                                        foreach (var item in Model.Destinations)
                                        {

                                            <option value="@item.DId" selected="@(item.DId == Model.DId)">@item.DestinationName</option>

                                        }
                                    }
                                </select>
                            </div>
                            <div class="mb-4">
                                <label for="RequesterName">@Model.lblRequesterName</label>

                                <select class="form-select" id="RequesterName" name="RequesterName" value="@ViewData[" RequesterName"]"></select>

                            </div>



                            <div class="mb-4">
                                <label for="RequestRecievedAt">@Model.lblRequestReceivedDate</label>
                                <input asp-for="RequestRecievedAt" type="date" class="form-control" name="RequestRecievedAt"
                                       value="@Model.RequestRecievedAt.ToString("yyyy-MM-dd")" />

                            </div>


                            <div class="mb-4">
                                <label class="my-1 me-2" for="Status">@Model.lblDisbursementStatus</label>

                                <select class="form-select" id="Status" name="Status">
                                    @if (Model.StatusList != null)
                                    {
                                        foreach (var item in Model.StatusList)
                                        {
                                            <option value="@item.Value">@item.Text</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="mb-4">
                                <label for="storeNumber">@Model.lblStoreName</label>
                                <select class="form-select" id="StoreId" name="StoreId">
                                    @if (Model.Stores != null)
                                    {
                                        foreach (var item in Model.Stores)
                                        {
                                            if (item.IsActive == 1 && item.Ended == null)
                                            {
                                                <option value="@item.StoreId" selected="@(item.StoreId == Model.StoreId)">@item.StoreName</option>
                                            }

                                        }
                                    }
                                </select>

                            </div>
                            <div class="mb-4">
                                <label for="ItemId">@Model.lblItemName</label>
                                <select class="form-select" id="ItemId" name="ItemId" value="@Model.ItemName"></select>
                            </div>
                            <div class="mb-4">
                                <label for="itemCode">@Model.lblItemCode</label>
                                <input type="text" class="form-control" id="ItemCode" value="@Model.ItemCode" readonly>
                            </div>
                            <div class="mb-4">
                                <label for="itemTypeCode">@Model.lblItemTypeCode</label>
                                <input type="text" class="form-control" id="ItemTypeCode" value="@Model.ItemTypeCode" readonly>
                            </div>
                            <div class="mb-4">
                                <label for="Quantity">@Model.lblQuantity</label>
                                <input type="text" name="Quantity" value="@Model.Quantity" class="form-control"
                                       id="Quantity">
                            </div>
                            <div class="mb-4">
                                <label for="Comments">@Model.lblComments</label>

                                <input type="text" class="form-control" id="Comments" name="Comments"
                                       value="@Model.Comments" />

                            </div>
                            <div class="mb-4">
                                <div class="form-check">
                                    <label class="form-check-label" for="InventoryBalanced">
                                        @Model.lblInventoryBalanced
                                    </label>
                                    <input id="InventoryBalanced" class="form-check-input" type="checkbox"
                                           name="InventoryBalanced" asp-for="InventoryBalanced">

                                </div>
                            </div>

                            <div class="mb-4">


                                <div class="d-flex mb-2 mb-md-0" style="gap: 10px">
                                    <a href="Disbursements"
                                       class="btn btn-outline-gray-600  align-items-center w-100">@Model.lblCancel</a>

                                    <input type="submit" value="@Model.lblUpdate"
                                           class="btn btn-sm btn-gray-800 align-items-center w-100"
                                           style="text-align:center;" />

                                </div>

                            </div>
                        </div>
                    </div>

                </form>
            </div>
        </div>
    </div>
}
