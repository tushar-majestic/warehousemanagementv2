@page
@model LabMaterials.Pages.newreturnRequestModel

@{
    ViewData["Title"] = "Create Return Request";
}
 
<div class="py-4">

    <div class="d-flex justify-content-between w-100 flex-wrap">
        <div class="mb-3 mb-lg-0">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-transparent p-2 mb-0">
                    <li class="breadcrumb-item d-flex align-items-center">
                        <img src="images/home.png" alt="Home" width="16" height="16" class="me-2" />
                        <a href="/Home" class="text-decoration-none">@Model.lblHome</a>
                    </li>
                    <li class="breadcrumb-item d-flex align-items-center">
                        <img src="images/inventory.png" alt="Home" width="16" height="16" class="me-2" />
                            <a href="/ViewReturnRequests" class="text-decoration-none">@Model.lblDamagedItems</a>
                    </li>
                    <li class="breadcrumb-item d-flex align-items-center">
                        <img src="images/inventory.png" alt="Home" width="16" height="16" class="me-2" />
                        @Model.lblCreateReturnRequest
                    </li>
                </ol>
            </nav>
              <h1 class="h4">@Model.lblCreateReturnRequest</h1>
            
        </div>
    </div>
</div>
       @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            ModelState is invalid. Errors:
            <ul>
                @foreach (var modelState in ViewData.ModelState)
                {
                    foreach (var error in modelState.Value.Errors)
                    {
                        <li>@modelState.Key: @error.ErrorMessage</li>
                    }
                }
            </ul>
        </div>
    }
<div class="row">
        <div class="col-8 mb-4 m-auto">
            <div class="card border-0 shadow components-section">
            <form method="post" class="card-body">
                <div id="returnEntriesWrapper">
                    @for (int i = 0; i < Model.ReturnItems.Count; i++)
                    {
                        <div class="return-entry border p-3 mb-3 rounded d-flex" style="flex-direction: column;  align-items: end;">
                            <div class="row">
                                <div class="col-md-6 mb-4">
                                    <label>Item Group</label>
                                    <select class="form-select item-group-select" name="ReturnItems[@i].itemGroup"  id="itemGroup_@i" onchange="filterItemsByGroup(@i)">
                                        <option value="">Select Group</option>
                                        @foreach (var group in Model.ItemGroups)
                                        {
                                            <option value="@group.GroupCode">@group.GroupDesc</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label>Arabic Item Name</label>
                                    <select class="form-select ArabicItemName" name="ReturnItems[@i].ItemCardId"  id="ArabicItemName_@i"
                                            onchange="onItemChange(this, @i)">
                                        <option value="">Select Item</option>
                                        @foreach (var item in Model.ItemCards)
                                        {   
                                            var Item = Model.AllItems.FirstOrDefault(i => i.ItemId == item.ItemId);
                                            <option value="@item.Id"
                                                    data-code="@item.ItemCode"
                                                    data-description="@item.ItemDescription"
                                                    data-chemical="@item.Chemical"
                                                    data-risk="@item.HazardTypeName"
                                                    data-unit="@item.UnitOfmeasure"
                                                    data-itemnamearabic="@item.ItemName"
                                                    data-itemnameenglish="@item.ItemName"
                                                    data-expdate = "@Item.ExpiryDate?.ToString("yyyy-MM-dd")">
                                                @item.ItemName
                                            </option>
                                        }
                                    </select>
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label>Item Code</label>
                                    <input type="text" name="ReturnItems[@i].ItemCode" class="form-control ItemCode" readonly />
                                </div>


                                <input hidden type="text" name="ReturnItems[@i].ItemNameArabic" class="form-control ItemNameArabic" id="" readonly />



                                <input hidden type="text" name="ReturnItems[@i].ItemNameEnglish" class="form-control ItemNameEnglish" readonly />
                                
                                <div class="col-md-6 mb-4">
                                    <label>Item Description</label>
                                    <input type="text" name="ReturnItems[@i].ItemDescription" class="form-control ItemDescription" readonly />
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label>Chemical</label>
                                    <input type="text" name="ReturnItems[@i].Chemical" class="form-control chemical" readonly />
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label>Risk Rating</label>
                                    <input type="text" name="ReturnItems[@i].RiskRating" class="form-control RiskRating" readonly />
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label>State of Matter</label>
                                    <select name="ReturnItems[@i].StateOfMatter" class="form-select" required>
                                        <option value="">Select State</option>
                                        @foreach (var state in Model.StateOfMatters)
                                        {
                                            <option value="@state.Value">@state.Text</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label>Expiry Date</label>
                                    <input type="date" name="ReturnItems[@i].ExpiryDate" class="form-control ExpDate"   />
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label>Unit of Measure</label>
                                    <input type="text" name="ReturnItems[@i].UnitOfMeasure" class="form-control UnitofMeasure" readonly />
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label>Return Quantity</label>
                                    <input type="number" name="ReturnItems[@i].ReturnedQuantity" class="form-control" required />
                                </div>
                                <div class="col-12 mb-4">
                                    <label>Return Notes</label>
                                    <textarea name="ReturnItems[@i].ReturnNotes" class="form-control" rows="2"></textarea>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <button type="button" class="btn btn-secondary mb-3" id="addEntryBtn" disabled>Add More</button>
                @* <div class="mb-3">
                    <label>Order Number</label>
                    <input type="text" name="OrderNumber" class="form-control" />
                </div> *@
                <div class="mb-4">
                    <label>Order Date</label>
                    <input type="date" name="OrderDate" class="form-control" value="@Model.CurrentDate.ToString("yyyy-MM-dd")" />
                </div>

                <div class="mb-4">
                    <label>Requesting Sector</label>
                    <input type="text" name="RequestingSector" class="form-control" value="General Administration of Educational Services" />
                </div>
                <div class="mb-4">
                    <label>Applicant's Sector</label>
                    <select name="ApplicantsSector" class="form-select" required>
                    <option value="">Select Applicant's Sector</option>
                        @foreach (var ApplicantsSector in Model.requesters.Where(r => r.Ended == null))
                        {
                            <option value="@ApplicantsSector.ReqId">@ApplicantsSector.ReqName, @ApplicantsSector.DestinationName</option>
                        }
                    </select>
                    @* <input type="text" name="ApplicantsSector" class="form-control" /> *@
                </div>
                <div class="mb-4">
                    <label>Store</label>
                    <select name="StoreId" class="form-select" required>
                    <option value="">Select Store</option>
                        @foreach (var store in Model.Stores.Where(s => s.IsActive == 1 && s.Ended == null))
                        {
                            <option value="@store.StoreId">@store.StoreName</option>
                        }
                    </select>
                </div>
                <div class="mb-4">
                    <label>Reason for Return</label><br />
                    <div class="form-check">
                        <input type="radio" class="form-check-input" name="ReasonForReturn" value="SurPlus" />
                        <label class="form-check-label">Surplus</label>
                    </div>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" name="ReasonForReturn" value="Expired" />
                        <label class="form-check-label">Expired</label>
                    </div>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" name="ReasonForReturn" value="Invalid" />
                        <label class="form-check-label">Invalid</label>
                    </div>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" name="ReasonForReturn" value="Damaged" />
                        <label class="form-check-label">Damaged</label>
                    </div>
                </div>
                <div class="d-flex gap-3">
                    <a href="/ManageItems" class="btn btn-outline-secondary">Cancel</a>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </form>

        </div>
    </div>
</div>


@section Scripts {
    <script>
        let entryIndex = @Model.ReturnItems.Count;

        function onItemChange(select, index) {
            const selected = select.options[select.selectedIndex];
            console.log(selected, 'selected')
            document.querySelectorAll(".ItemCode")[index].value = selected.dataset.code || "";
            document.querySelectorAll(".ItemDescription")[index].value = selected.dataset.description || "";
            document.querySelectorAll(".chemical")[index].value = selected.dataset.chemical || "";
            document.querySelectorAll(".RiskRating")[index].value = selected.dataset.risk || "";
            document.querySelectorAll(".UnitofMeasure")[index].value = selected.dataset.unit || "";
            document.querySelectorAll(".ItemNameArabic")[index].value = selected.dataset.itemnamearabic || "";
            document.querySelectorAll(".ItemNameEnglish")[index].value = selected.dataset.itemnameenglish || "";
            // document.querySelectorAll(".ExpDate")[index].value = selected.dataset.expdate || "";
            const rawExpDate = selected.dataset.expdate || "";
            const formattedExpDate = rawExpDate.split("T")[0]; // in case it ever comes with time
            document.querySelectorAll(".ExpDate")[index].value = formattedExpDate;

            // Check for duplicates
            const selectedValue = select.value;
            let duplicates = 0;
            document.querySelectorAll(".ArabicItemName").forEach((el) => {
                if (el.value === selectedValue) {
                    duplicates++;
                }
            });
            if (duplicates > 1) {
                alert("This item has already been selected in another entry.");
                select.value = ""; // Reset
            }
        }
       document.addEventListener("DOMContentLoaded", function () {
            console.log("checking add btn")
            const addBtn = document.getElementById("addEntryBtn");

            function checkAllRequiredFieldsFilled() {
                

                const currentEntry = document.querySelector(".return-entry:last-child"); // check the last entry
                const requiredFields = currentEntry.querySelectorAll("[required]");
                let allFilled = true;

                requiredFields.forEach(field => {
                    if (!field.value.trim()) {
                        allFilled = false;
                    }
                });

                addBtn.disabled = !allFilled;
            }

            // Re-check on any input/select change
            document.getElementById("returnEntriesWrapper").addEventListener("input", checkAllRequiredFieldsFilled);
            document.getElementById("returnEntriesWrapper").addEventListener("change", checkAllRequiredFieldsFilled);
        });

        document.getElementById("addEntryBtn").addEventListener("click", function () {
             const addButton = document.getElementById('addEntryBtn');
            addButton.disabled = true;
            console.log('addEntryBtn')
            const wrapper = document.getElementById("returnEntriesWrapper");
            const firstEntry = wrapper.querySelector(".return-entry");
            const newEntry = firstEntry.cloneNode(true);
            
         

            newEntry.querySelectorAll("input, select, textarea").forEach((el) => {
                if (el.name) {
                    el.name = el.name.replace(/\[\d+\]/, `[${entryIndex}]`);
                }
                if (el.id) {
                    el.id = el.id.replace(/_\d+/, `_${entryIndex}`);
                }

                if (el.type !== "hidden") {
                    el.value = "";
                }

                if (el.tagName.toLowerCase() === "select") {
                    el.selectedIndex = 0;
                }
            });
            const currentIndex = entryIndex;
            const itemSelect = newEntry.querySelector(".ArabicItemName");

            const itemSelectGroup = newEntry.querySelector(".item-group-select");
             if (itemSelectGroup) {
                 itemSelectGroup.removeAttribute("onchange");
                itemSelectGroup.addEventListener("change", function () {
                    filterItemsByGroup(currentIndex);
                });

            }
            itemSelect.setAttribute("onchange", `onItemChange(this, ${entryIndex})`);

            // Ensure remove button works
            // const removeBtn = newEntry.querySelector(".remove-entry");
            // if (removeBtn) {
            //     removeBtn.addEventListener("click", function () {
            //         newEntry.remove();
            //     });
            // }
             const removeBtn = document.createElement("button");
                removeBtn.type = "button";
                removeBtn.className = "btn btn-danger remove-entry mt-2";
                removeBtn.innerText = "Remove";
                removeBtn.addEventListener("click", function () {
                    newEntry.remove();
                    const addButton = document.getElementById('addEntryBtn');
                    addButton.disabled = false;
                });

              newEntry.insertBefore(removeBtn, newEntry.firstChild);

            wrapper.appendChild(newEntry);
            
            entryIndex++;
          
        });

        // Initial remove buttons setup
        document.querySelectorAll(".remove-entry").forEach(btn => {
            btn.addEventListener("click", function () {
                btn.closest(".return-entry").remove();
            });
        });


        function filterItemsByGroup(index) {
            const allItems = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ItemsValue));
            console.log(allItems, 'allItems')
            const selectedGroup = document.getElementById("itemGroup_" + index)?.value;

            const itemSelect = document.getElementById("ArabicItemName_" + index);
             console.log("itemSelect",itemSelect )

            // Clear current items
             itemSelect.innerHTML = '<option value="">Select Item</option>';
            console.log("selectedgroup",selectedGroup )
            // Filter and repopulate
            if (!Array.isArray(allItems)) {
                console.error("allItems is not an array", allItems);
                return;
            }
            allItems.filter(item => item.GroupCode === selectedGroup)
            .forEach(item => {
                const option = document.createElement("option");
                option.value = item.Id;
                option.code = item.ItemCode;
                option.textContent = item.ItemName;
                option.dataset.itemnamearabic = item.ItemName;
                option.dataset.itemnameenglish = item.ItemName;
                option.dataset.code = item.ItemCode;
                option.dataset.description = item.ItemDescription;
                option.dataset.chemical = item.Chemical;
                option.dataset.unit = item.UnitOfmeasure;
                option.dataset.risk = item.HazardTypeName || "";
                option.dataset.expdate = item.ExpiryDate || "";



                itemSelect.appendChild(option);

            });
        }
    </script>
}

