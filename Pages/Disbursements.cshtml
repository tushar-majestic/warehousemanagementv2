@page
@using Microsoft.AspNetCore.Http
@model LabMaterials.Pages.DisbursementsModel
@section Scripts
{
    <script type="text/javascript" language="javascript">
        const notyf = new Notyf({
            position: {
                x: 'center',
                y: 'top',
            },
            types: [
                {
                    type: 'error',
                    background: '#e3392c',
                    icon: {
                        className: 'fas fa-times',
                        tagName: 'span',
                        color: '#000000'
                    },
                    dismissible: true,
                    duration: 0,
                    ripple: true
                }
            ]
        });

        function showErrorNotification(message) {
            notyf.open({
                type: 'error',
                message: message
            });
        }

        @if (!string.IsNullOrEmpty(Model.Message))
        {
            <text>
                    var errorMessageFromServer = @Html.Raw(Json.Serialize(Model.Message));
                    showErrorNotification(errorMessageFromServer);
            </text>
        }

        const toggleButton = document.getElementById('toggleDropdown');
        const dropdownPanel = document.getElementById('dropdownPanel');

        toggleButton.addEventListener('click', function () {
            dropdownPanel.style.display = dropdownPanel.style.display === 'none' ? 'block' : 'none';
        });

        // Optional: Hide dropdown when clicking outside
        document.addEventListener('click', function(event) {
            if (!toggleButton.contains(event.target) && !dropdownPanel.contains(event.target)) {
                dropdownPanel.style.display = 'none';
            }
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <script>
        document.getElementById('exportExcel').addEventListener('click', function () {
            let table = document.querySelector('#exportTable'); // use hidden export table directly
            let wb = XLSX.utils.book_new();
            let ws_data = [];

            // Get headers
            const headers = Array.from(table.querySelectorAll('thead th'))
                .map(th => th.textContent.trim()); // use textContent instead of innerText
            ws_data.push(headers);

            // Get rows
            const rows = table.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const rowData = [];
                const cells = row.querySelectorAll('th, td');
                cells.forEach(cell => {
                    rowData.push(cell.textContent.trim()); // use textContent
                });
                ws_data.push(rowData);
            });

            // Create worksheet and trigger download
            let ws = XLSX.utils.aoa_to_sheet(ws_data);
            XLSX.utils.book_append_sheet(wb, ws, "Disbursement Data");
            XLSX.writeFile(wb, "DisbursementData.xlsx");
        });
    </script>
    <script>
document.addEventListener("DOMContentLoaded", function () {
    const filterButton = document.getElementById("toggleFilterDropdown");
    const filterPanel = document.getElementById("filterDropdownPanel");

    const filterData = {
        status: @Html.Raw(Json.Serialize(Model.UniqueStatus ?? new List<string>())),
        storeName: @Html.Raw(Json.Serialize(Model.UniqueStoreName ?? new List<string>())),
        requestingPlace: @Html.Raw(Json.Serialize(Model.UniqueRequestingPlace ?? new List<string>()))
    };

    // Load selected filters from URL
    const urlParams = new URLSearchParams(window.location.search);
    const selectedFilters = {};
    for (const key in filterData) {
        const value = urlParams.get(key);
        if (value) {
            selectedFilters[key] = decodeURIComponent(value.trim());
        }
    }

    function showFilterValues(category) {
        const container = document.getElementById("filterValues");
        container.innerHTML = "";

        let values = filterData[category] || [];
        values = values.filter(v => typeof v === 'string' && v.trim() !== "");

        if (values.length === 0) {
            container.innerHTML = "<div class='text-muted'>No values found</div>";
            return;
        }

        const list = document.createElement("div");

        values.forEach(function (value) {
            const checkboxId = `${category}_${value}`;
            const div = document.createElement("div");
            div.className = "form-check mb-1";

            const input = document.createElement("input");
            input.className = "form-check-input";
            input.type = "checkbox";
            input.name = category;
            input.value = value;
            input.id = checkboxId;

            input.checked = selectedFilters[category] === value;

            input.addEventListener("change", function () {
                if (input.checked) {
                    document.querySelectorAll(`input[name="${category}"]`).forEach(cb => {
                        if (cb !== input) cb.checked = false;
                    });
                    selectedFilters[category] = value;
                } else {
                    delete selectedFilters[category];
                }
            });

            const label = document.createElement("label");
            label.className = "form-check-label";
            label.htmlFor = checkboxId;
            label.innerText = value;

            div.appendChild(input);
            div.appendChild(label);
            list.appendChild(div);
        });

        container.appendChild(list);

        // Apply button
        const applyDiv = document.createElement("div");
        applyDiv.className = "mt-3 text-end";
        const applyBtn = document.createElement("button");
        applyBtn.type = "button";
        applyBtn.className = "btn btn-success btn-sm";
        applyBtn.innerText = "Apply";
        applyBtn.onclick = function () {
            applyFilters();
        };
        applyDiv.appendChild(applyBtn);
        container.appendChild(applyDiv);

        // Highlight current filter type
        document.querySelectorAll('.filter-option').forEach(el => el.classList.remove('fw-bold', 'text-dark'));
        document.querySelector(`[onclick="showFilterValues('${category}')"]`)?.classList.add('fw-bold', 'text-dark');
    }

    function applyFilters() {
        const url = new URL(window.location.href);
        url.searchParams.delete("handler");
        url.searchParams.set("page", "1");

        Object.entries(selectedFilters).forEach(([key, value]) => {
            if (value) {
                url.searchParams.set(key, value);
            }
        });

        window.location.href = url;
    }

    filterButton.addEventListener("click", function (e) {
        e.stopPropagation();
        const isVisible = filterPanel.style.display === "flex";
        filterPanel.style.display = isVisible ? "none" : "flex";
        if (!isVisible) showFilterValues('status'); // default on open
    });

    document.addEventListener("click", function (e) {
        if (!filterPanel.contains(e.target) && e.target !== filterButton) {
            filterPanel.style.display = "none";
        }
    });

    window.showFilterValues = showFilterValues;
});
</script>
    
}
@{
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center py-4">
        <div class="d-block mb-4 mb-md-0">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb bg-transparent p-2 mb-0">
                        <li class="breadcrumb-item d-flex align-items-center">
                            <img src="images/home.png" alt="Home" width="16" height="16" class="me-2" />
                            <a href="/Home" class="text-decoration-none">@Model.lblHome</a>
                        </li>
                        <li class="breadcrumb-item d-flex align-items-center active" aria-current="page">
                            <img src="images/expenses.png" alt="Home" width="16" height="16" class="me-2" />
                             @Model.lblDisbursements
                        </li>
                    </ol>
                </nav>
            <h2 class="h4">@Model.lblDisbursements</h2>
             <!-- <p class="mb-0">Your web analytics dashboard template.</p>-->
        </div>
        @{
            var userGroup = HttpContext.Session.GetString("UserGroup");
        }

        @if (Model.CanGenerateDispensingRequest)
        {
            <div class="btn-toolbar mb-2 mb-md-0">
                <div class="btn-group ms-2 ms-lg-3">
                    <a href="AddDisbursement" class="btn btn-sm d-flex btn-gray-800 justify-content-center top-big-btn d-inline-flex align-items-center">
                        <img class="icon text-white icon-xs mx-2" src="images/plus.png" />
                        @Model.lblAddDisbursement
                    </a>
                </div>
            </div>
        }

    </div>
    @* <div style="text-align:center; color:maroon">@Model.Message</div>  *@
    
<div class="row mb-4 align-items-start">
    <div class="col-auto">
        <button id="exportExcel" class="btn btn-success mb-3">@Model.lblExportExcel</button>
        <button id="printBtn" class="btn btn-primary mb-3">@Model.lblPrintTable</button>
    </div>

        @if (Model.TotalItems > 0)
        {
            <div class="col text-end position-relative">
                <button type="button" id="toggleFilterDropdown" class="btn btn-secondary">
                    Filter
                </button>

                <!-- Filter Panel -->
                <div id="filterDropdownPanel"
                    class="card shadow-sm position-absolute flex-row"
                    style="right: 0; top: 100%; width: 400px; display: none; z-index: 1000; height: 400px; overflow: hidden;">

                    <!-- Left: Filter Categories -->
                    <div class="border-end p-2" style="width: 40%; overflow-y: auto; position: relative;">
                        <div class="fw-bolder text-center mb-2">Filter By</div>
                        <div class="filter-option text-primary mb-2" onclick="showFilterValues('status')" style="cursor: pointer;">Status</div>
                        <div class="filter-option text-primary mb-2" onclick="showFilterValues('storeName')" style="cursor: pointer;">Warehouse Name</div>
                        <div class="filter-option text-primary mb-2" onclick="showFilterValues('requestingPlace')" style="cursor: pointer;">Requesting Place</div>

                        <!-- Clear Filters Button -->
                        <button type="button" class="btn btn-primary"
                            style="position: absolute; bottom: 10px; left: 10px;"
                            onclick="window.location.href='/Disbursements'">
                            Clear Filters
                        </button>
                    </div>

                    <!-- Right: Dynamic Filter Values + Apply Button -->
                    <div class="p-2" id="filterValues"
                        style="width: 60%; overflow-y: auto; border-left: 1px solid #eee;">
                        <div class="text-muted">Select a filter from left</div>
                    </div>
                </div>
            </div>
        }
</div>
    <div class="table-settings mb-4">
        <form method="post" asp-page-handler="Action" class="row align-items-center">

            <!-- Requester Name Input -->
            <div class="col col-lg-3 col-xl-3">
                <div class="input-group me-2 me-lg-3 fmxw-400">
                    <span class="input-group-text">
                        <svg class="icon icon-xs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd"
                                d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                                clip-rule="evenodd">
                            </path>
                        </svg>
                    </span>
                    <input type="text" name="RequesterName" class="form-control" 
                        placeholder="@Model.lblRequesterName" 
                        value="@Model.RequesterName" />
                </div>
            </div>

            <div class="col col-lg-3 col-xl-3">
                <div class="input-group me-2 me-lg-3 fmxw-400">
                    <span class="input-group-text">
                        @Model.lblFromDate
                    </span>
                    <input asp-for="FromDate" class="form-control" type="date" name="FromDate"
                        value="@Model.FromDate?.ToString("yyyy-MM-dd")" />
                </div>
            </div>

            <div class="col col-lg-3 col-xl-3">
                <div class="input-group me-2 me-lg-3 fmxw-400">
                    <span class="input-group-text">
                        @Model.lblToDate
                    </span>
                    <input asp-for="ToDate" class="form-control" type="date" name="ToDate"
                        value="@Model.ToDate?.ToString("yyyy-MM-dd")" />
                </div>
            </div>

            <div class="col-4 col-md-2 col-xl-1 ps-md-0">
                <button type="submit" name="action" value="search" class="btn btn-primary w-100">
                    @Model.lblSubmit
                </button>
            </div>

            <div class="col text-end position-relative mt-3 mt-md-0">
                <button type="button" id="toggleDropdown" class="btn btn-secondary">
                    @Model.lblShowHideColumn
                </button>
        
                <!-- Dropdown Panel -->
                <div id="dropdownPanel" class="card p-2 shadow-sm position-absolute"
                    style="right: 0; top: 100%; width: 200px; display: none; z-index: 1000;">

                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="requesterName" id="requesterName"
                        @(Model.SelectedColumns.Contains("requesterName") ? "checked" : "")>
                        <label class="form-check-label" for="requesterName">@Model.lblRequesterName</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="requestReceivedDate" id="requestReceivedDate"
                        @(Model.SelectedColumns.Contains("requestReceivedDate") ? "checked" : "")>
                        <label class="form-check-label" for="requestReceivedDate">@Model.lblRequestReceivedDate</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="destination" id="destination"
                        @(Model.SelectedColumns.Contains("destination") ? "checked" : "")>
                        <label class="form-check-label" for="destination">@Model.lblDestination</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="storeName" id="storeName"
                        @(Model.SelectedColumns.Contains("storeName") ? "checked" : "")>
                        <label class="form-check-label" for="storeName">@Model.lblStoreName</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="comments" id="comments"
                        @(Model.SelectedColumns.Contains("comments") ? "checked" : "")>
                        <label class="form-check-label" for="comments">@Model.lblComments</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="disbursementStatus" id="disbursementStatus"
                        @(Model.SelectedColumns.Contains("disbursementStatus") ? "checked" : "")>
                        <label class="form-check-label" for="disbursementStatus">@Model.lblDisbursementStatus</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="inventoryBalance" id="inventoryBalance"
                        @(Model.SelectedColumns.Contains("inventoryBalance") ? "checked" : "")>
                        <label class="form-check-label" for="inventoryBalance">@Model.lblInventoryBalanced</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="itemName" id="itemName"
                        @(Model.SelectedColumns.Contains("itemName") ? "checked" : "")>
                        <label class="form-check-label" for="itemName">@Model.lblItemName</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="itemCode" id="itemCode"
                        @(Model.SelectedColumns.Contains("itemCode") ? "checked" : "")>
                        <label class="form-check-label" for="itemCode">@Model.lblItemCode</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="itemType" id="itemType"
                        @(Model.SelectedColumns.Contains("itemType") ? "checked" : "")>
                        <label class="form-check-label" for="itemType">@Model.lblItemType</label>
                    </div>
                    <div class="form-check mb-1">
                        <input class="form-check-input column-checkbox" name="columns" type="checkbox" value="quantity" id="quantity"
                        @(Model.SelectedColumns.Contains("quantity") ? "checked" : "")>
                        <label class="form-check-label" for="quantity">@Model.lblQuantity</label>
                    </div>

                    <div class="form-check mb-1 text-center mt-2">
                        <button type="submit" name="action" value="updateColumns" class="btn btn-success btn-sm">
                            Ok
                        </button>
                    </div>

                </div>
            </div>

        </form>
    </div>
    <div class="d-flex justify-content-between align-items-center">
        <div class="">@Model.lblTotalItem : @Model.TotalItems</div>
        <div>

            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Page navigation">
                    <ul class="pagination">

                        @* Previous button *@
                        @if (Model.CurrentPage > 1)
                        {
                        
                            <li class="page-item">
                                <a class="page-link" href="?page=@(Model.CurrentPage - 1)&RequesterName=@Model.RequesterName&status=@Model.Status&storeName=@Model.StoreName&requestingPlace=@Model.RequestingPlace&FromDate=@Model.FromDate?.ToString("yyyy-MM-dd")&ToDate=@Model.ToDate?.ToString("yyyy-MM-dd")">&laquo;</a>
                            </li>
                        }

                        @* Show pages normally if the total pages are less than or equal to 10 *@
                        @if (Model.TotalPages <= 10)
                        {
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="?page=@i&RequesterName=@Model.RequesterName&status=@Model.Status&storeName=@Model.StoreName&requestingPlace=@Model.RequestingPlace&FromDate=@Model.FromDate?.ToString("yyyy-MM-dd")&ToDate=@Model.ToDate?.ToString("yyyy-MM-dd")">@i</a>
                                </li>
                            }
                        }
                        else
                        {
                            @* Show the first page, then ellipsis if there are skipped pages *@
                            @if (Model.CurrentPage > 3)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="?page=1&RequesterName=@Model.RequesterName&status=@Model.Status&storeName=@Model.StoreName&requestingPlace=@Model.RequestingPlace&FromDate=@Model.FromDate?.ToString("yyyy-MM-dd")&ToDate=@Model.ToDate?.ToString("yyyy-MM-dd")">1</a>
                                </li>
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }

                            @* Show pages from (current-1) to (current+1) *@
                            @for (int i = Math.Max(1, Model.CurrentPage - 1); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 1); i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="?page=@i&RequesterName=@Model.RequesterName&status=@Model.Status&storeName=@Model.StoreName&requestingPlace=@Model.RequestingPlace&FromDate=@Model.FromDate?.ToString("yyyy-MM-dd")&ToDate=@Model.ToDate?.ToString("yyyy-MM-dd")">@i</a>
                                </li>
                            }

                            @* Add "..." if there are skipped pages after the current page *@
                            @if (Model.CurrentPage < Model.TotalPages - 1)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }

                            @* Show the last page, if it's not already visible *@
                            @if (Model.CurrentPage < Model.TotalPages - 2)
                            {   
                                <li class="page-item">
                                    <a class="page-link" href="?page=@Model.TotalPages&RequesterName=@Model.RequesterName&status=@Model.Status&storeName=@Model.StoreName&requestingPlace=@Model.RequestingPlace&FromDate=@Model.FromDate?.ToString("yyyy-MM-dd")&ToDate=@Model.ToDate?.ToString("yyyy-MM-dd")">@Model.TotalPages</a>
                                </li>
                            }
                        }

                        @* Last buttons *@
                        @if (Model.CurrentPage < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="?page=@(Model.CurrentPage + 1)&RequesterName=@Model.RequesterName&status=@Model.Status&storeName=@Model.StoreName&requestingPlace=@Model.RequestingPlace&FromDate=@Model.FromDate?.ToString("yyyy-MM-dd")&ToDate=@Model.ToDate?.ToString("yyyy-MM-dd")">&raquo;</a>
                            </li>
                        
                        }

                    </ul>
                </nav>
            }
        </div>
    </div>
}

    <div class="card border-0 shadow mb-4">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-centered table-nowrap mb-0 rounded">
                    <thead class="thead-light">
                        <tr>
                            @if (Model.SelectedColumns.Contains("requesterName"))
                            {
                            <th scope="col" class="border-0 rounded-start">@Model.lblRequesterName</th>
                            }
                            @if (Model.SelectedColumns.Contains("requestReceivedDate"))
                            {
                            <th scope="col" class="border-0">@Model.lblRequestReceivedDate</th>
                            }
                            @if (Model.SelectedColumns.Contains("destination"))
                            {
                            <th scope="col" class="border-0">@Model.lblDestination</th>
                            }
                            @if (Model.SelectedColumns.Contains("storeName"))
                            {
                            <th scope="col" class="border-0">@Model.lblStoreName</th>
                            }
                            @if (Model.SelectedColumns.Contains("comments"))
                            {
                            <th scope="col" class="border-0">@Model.lblComments</th>
                            }
                            @if (Model.SelectedColumns.Contains("disbursementStatus"))
                            {
                            <th scope="col" class="border-0">@Model.lblDisbursementStatus</th>
                            }
                            @if (Model.SelectedColumns.Contains("inventoryBalance"))
                            {
                            <th scope="col" class="border-0">@Model.lblAvailableQuantity</th>
                            }
                            @if (Model.SelectedColumns.Contains("itemName"))
                            {
                            <th scope="col" class="border-0">@Model.lblItemName</th>
                            }
                            @if (Model.SelectedColumns.Contains("itemCode"))
                            {
                            <th scope="col" class="border-0">@Model.lblItemCode</th>
                            }
                            @if (Model.SelectedColumns.Contains("itemType"))
                            {
                            <th scope="col" class="border-0">@Model.lblItemType</th>
                            }
                            @if (Model.SelectedColumns.Contains("quantity"))
                            {
                            <th scope="col" class="border-0">@Model.lblQuantity</th>
                            }
                            @* <th scope="col" class="border-0 rounded-end">Action</th> *@
                            
                        </tr>
                    </thead>
                    <tbody>
                         @if (Model.Disbursement != null)
            {
                foreach (var item in Model.Disbursement)
                {
                    <tr>
                        @if (Model.SelectedColumns.Contains("requesterName"))
                        {
                        <th scope="row">@item.RequesterName</th>
                        }
                        @if (Model.SelectedColumns.Contains("requestReceivedDate"))
                        {
                        <td>@item.ReqReceivedAt</td>
                        }
                        @if (Model.SelectedColumns.Contains("destination"))
                        {
                        <td>@item.RequestingPlace</td>
                        }
                        @if (Model.SelectedColumns.Contains("storeName"))
                        {
                        <td>@item.StoreName</td>
                        }
                        @if (Model.SelectedColumns.Contains("comments"))
                        {
                        <td>@item.Comments</td>
                        }
                        @if (Model.SelectedColumns.Contains("disbursementStatus"))
                        {
                        <td>@item.Status</td>
                        }
                        @if (Model.SelectedColumns.Contains("inventoryBalance"))
                        {
                        <td>@item.InventoryBalanced</td>
                        }
                        @if (Model.SelectedColumns.Contains("itemName"))
                        {
                        <td>@item.ItemName</td>
                        }
                        @if (Model.SelectedColumns.Contains("itemCode"))
                        {
                        <td>@item.ItemCode</td>
                        }
                        @if (Model.SelectedColumns.Contains("itemType"))
                        {
                        <td>@item.ItemTypeCode</td>
                        }
                        @if (Model.SelectedColumns.Contains("quantity"))
                        {
                        <td>@item.Quantity</td>
                        }

                        <td>
                            <form method="post">
                                <input type="hidden" value="@item.DisbursementRequestId" name="DisbursementID" />

                               
                                <input type="hidden" value="@Model.CurrentPage" name="page" />
                                <input type="hidden" value="@Model.RequesterName" name="RequesterName" />
                                <input type="hidden" value="@Model.FromDate?.ToString("yyyy-MM-dd")" name="FromDate" />
                                <input type="hidden" value="@Model.ToDate?.ToString("yyyy-MM-dd")" name="ToDate" />
                                

                                @* <input type="submit" value="@Model.lblEdit" class="btn btn-secondary" asp-page-handler="Edit" /> 
                                <input type="submit" value="@Model.lblView" class="btn btn-secondary" asp-page-handler="View" />*@
                            </form>
                        </td>
                    </tr>
                }
            }
                        <tr>
                            <td colspan="4">
                                <div>@Model.lblTotalItem : @Model.TotalItems</div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    

    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination">

                @* Previous button *@
                @if (Model.CurrentPage > 1)
                {
                   
                    <li class="page-item">
                        <a class="page-link" href="?page=@(Model.CurrentPage - 1)&RequesterName=@Model.RequesterName&status=@Model.Status&storeName=@Model.StoreName&requestingPlace=@Model.RequestingPlace&FromDate=@Model.FromDate?.ToString("yyyy-MM-dd")&ToDate=@Model.ToDate?.ToString("yyyy-MM-dd")">&laquo;</a>
                    </li>
                }

                @* Show pages normally if the total pages are less than or equal to 10 *@
                @if (Model.TotalPages <= 10)
                {
                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="?page=@i&RequesterName=@Model.RequesterName&status=@Model.Status&storeName=@Model.StoreName&requestingPlace=@Model.RequestingPlace&FromDate=@Model.FromDate?.ToString("yyyy-MM-dd")&ToDate=@Model.ToDate?.ToString("yyyy-MM-dd")">@i</a>
                        </li>
                    }
                }
                else
                {
                    @* Show the first page, then ellipsis if there are skipped pages *@
                    @if (Model.CurrentPage > 3)
                    {
                        <li class="page-item">
                            <a class="page-link" href="?page=1&RequesterName=@Model.RequesterName&status=@Model.Status&storeName=@Model.StoreName&requestingPlace=@Model.RequestingPlace&FromDate=@Model.FromDate?.ToString("yyyy-MM-dd")&ToDate=@Model.ToDate?.ToString("yyyy-MM-dd")">1</a>
                        </li>
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }

                    @* Show pages from (current-1) to (current+1) *@
                    @for (int i = Math.Max(1, Model.CurrentPage - 1); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 1); i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="?page=@i&RequesterName=@Model.RequesterName&status=@Model.Status&storeName=@Model.StoreName&requestingPlace=@Model.RequestingPlace&FromDate=@Model.FromDate?.ToString("yyyy-MM-dd")&ToDate=@Model.ToDate?.ToString("yyyy-MM-dd")">@i</a>
                        </li>
                    }

                    @* Add "..." if there are skipped pages after the current page *@
                    @if (Model.CurrentPage < Model.TotalPages - 1)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }

                    @* Show the last page, if it's not already visible *@
                    @if (Model.CurrentPage < Model.TotalPages - 2)
                    {   
                        <li class="page-item">
                            <a class="page-link" href="?page=@Model.TotalPages&RequesterName=@Model.RequesterName&status=@Model.Status&storeName=@Model.StoreName&requestingPlace=@Model.RequestingPlace&FromDate=@Model.FromDate?.ToString("yyyy-MM-dd")&ToDate=@Model.ToDate?.ToString("yyyy-MM-dd")">@Model.TotalPages</a>
                        </li>
                    }
                }

                @* Last buttons *@
                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="?page=@(Model.CurrentPage + 1)&RequesterName=@Model.RequesterName&status=@Model.Status&storeName=@Model.StoreName&requestingPlace=@Model.RequestingPlace&FromDate=@Model.FromDate?.ToString("yyyy-MM-dd")&ToDate=@Model.ToDate?.ToString("yyyy-MM-dd")">&raquo;</a>
                    </li>
                   
                }

            </ul>
        </nav>
    }


    <div class="table-responsive" id="exportTableContainer" style="display: none;">
        <table class="table table-centered table-nowrap mb-0 rounded" id="exportTable">
            <thead class="thead-light">
                <tr>
                    @if (Model.SelectedColumns.Contains("requesterName"))
                    {
                    <th scope="col" class="border-0 rounded-start">@Model.lblRequesterName</th>
                    }
                    @if (Model.SelectedColumns.Contains("requestReceivedDate"))
                    {
                    <th scope="col" class="border-0">@Model.lblRequestReceivedDate</th>
                    }
                    @if (Model.SelectedColumns.Contains("destination"))
                    {
                    <th scope="col" class="border-0">@Model.lblDestination</th>
                    }
                    @if (Model.SelectedColumns.Contains("storeName"))
                    {
                    <th scope="col" class="border-0">@Model.lblStoreName</th>
                    }
                    @if (Model.SelectedColumns.Contains("comments"))
                    {
                    <th scope="col" class="border-0">@Model.lblComments</th>
                    }
                    @if (Model.SelectedColumns.Contains("disbursementStatus"))
                    {
                    <th scope="col" class="border-0">@Model.lblDisbursementStatus</th>
                    }
                    @if (Model.SelectedColumns.Contains("inventoryBalance"))
                    {
                    <th scope="col" class="border-0">@Model.lblAvailableQuantity</th>
                    }
                    @if (Model.SelectedColumns.Contains("itemName"))
                    {
                    <th scope="col" class="border-0">@Model.lblItemName</th>
                    }
                    @if (Model.SelectedColumns.Contains("itemCode"))
                    {
                    <th scope="col" class="border-0">@Model.lblItemCode</th>
                    }
                    @if (Model.SelectedColumns.Contains("itemType"))
                    {
                    <th scope="col" class="border-0">@Model.lblItemType</th>
                    }
                    @if (Model.SelectedColumns.Contains("quantity"))
                    {
                    <th scope="col" class="border-0">@Model.lblQuantity</th>
                    }
                </tr>
            </thead>
            <tbody>
            @if (Model.DisbursementAll != null)
            {
                foreach (var item in Model.DisbursementAll)
                {
                    <tr>
                        @if (Model.SelectedColumns.Contains("requesterName"))
                        {
                        <th scope="row">@item.RequesterName</th>
                        }
                        @if (Model.SelectedColumns.Contains("requestReceivedDate"))
                        {
                        <td>@item.ReqReceivedAt</td>
                        }
                        @if (Model.SelectedColumns.Contains("destination"))
                        {
                        <td>@item.RequestingPlace</td>
                        }
                        @if (Model.SelectedColumns.Contains("storeName"))
                        {
                        <td>@item.StoreName</td>
                        }
                        @if (Model.SelectedColumns.Contains("comments"))
                        {
                        <td>@item.Comments</td>
                        }
                        @if (Model.SelectedColumns.Contains("disbursementStatus"))
                        {
                        <td>@item.Status</td>
                        }
                        @if (Model.SelectedColumns.Contains("inventoryBalance"))
                        {
                        <td>@item.InventoryBalanced</td>
                        }
                        @if (Model.SelectedColumns.Contains("itemName"))
                        {
                        <td>@item.ItemName</td>
                        }
                        @if (Model.SelectedColumns.Contains("itemCode"))
                        {
                        <td>@item.ItemCode</td>
                        }
                        @if (Model.SelectedColumns.Contains("itemType"))
                        {
                        <td>@item.ItemTypeCode</td>
                        }
                        @if (Model.SelectedColumns.Contains("quantity"))
                        {
                        <td>@item.Quantity</td>
                        }

                    </tr>
                }
            }
            </tbody>
        </table>
    </div>